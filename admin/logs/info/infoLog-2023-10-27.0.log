2023-10-27 12:57:46:386 [main] INFO  org.example.AdminApplication(StartupInfoLogger.java 51) -Starting AdminApplication using Java 17.0.8 with PID 14240 (D:\javaFile\FirstBlog\admin\target\classes started by banxing in D:\javaFile\FirstBlog)
2023-10-27 12:57:46:386 [main] INFO  org.example.AdminApplication(SpringApplication.java 634) -No active profile set, falling back to 1 default profile: "default"
2023-10-27 12:57:47:453 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate(RepositoryConfigurationDelegate.java 291) -Multiple Spring Data modules found, entering strict repository configuration mode
2023-10-27 12:57:47:456 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate(RepositoryConfigurationDelegate.java 138) -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-10-27 12:57:47:492 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate(RepositoryConfigurationDelegate.java 208) -Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2023-10-27 12:57:48:123 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer(TomcatWebServer.java 108) -Tomcat initialized with port(s): 8989 (http)
2023-10-27 12:57:48:128 [main] INFO  org.apache.coyote.http11.Http11NioProtocol(DirectJDKLog.java 173) -Initializing ProtocolHandler ["http-nio-0.0.0.0-8989"]
2023-10-27 12:57:48:130 [main] INFO  org.apache.catalina.core.StandardService(DirectJDKLog.java 173) -Starting service [Tomcat]
2023-10-27 12:57:48:130 [main] INFO  org.apache.catalina.core.StandardEngine(DirectJDKLog.java 173) -Starting Servlet engine: [Apache Tomcat/10.1.12]
2023-10-27 12:57:48:210 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/](DirectJDKLog.java 173) -Initializing Spring embedded WebApplicationContext
2023-10-27 12:57:48:211 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext(ServletWebServerApplicationContext.java 291) -Root WebApplicationContext: initialization completed in 1786 ms
2023-10-27 12:57:49:700 [main] INFO  o.s.security.web.DefaultSecurityFilterChain(DefaultSecurityFilterChain.java 54) -Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7a71ebf1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@16890f00, org.springframework.security.web.context.SecurityContextHolderFilter@cda144a, org.springframework.security.web.header.HeaderWriterFilter@42536da6, org.example.filter.JwtAuthenticationTokenFilter@48b3b1b8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5847010, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1ad9d5be, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@77e1dacd, org.springframework.security.web.session.SessionManagementFilter@6ae32ff0, org.springframework.security.web.access.ExceptionTranslationFilter@5b0e5d5f, org.springframework.security.web.access.intercept.AuthorizationFilter@1f7fcec2]
2023-10-27 12:57:50:023 [main] INFO  org.apache.coyote.http11.Http11NioProtocol(DirectJDKLog.java 173) -Starting ProtocolHandler ["http-nio-0.0.0.0-8989"]
2023-10-27 12:57:50:038 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer(TomcatWebServer.java 220) -Tomcat started on port(s): 8989 (http) with context path ''
2023-10-27 12:57:50:045 [main] INFO  org.example.AdminApplication(StartupInfoLogger.java 57) -Started AdminApplication in 4.066 seconds (process running for 4.739)
2023-10-27 12:57:50:525 [http-nio-0.0.0.0-8989-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/](DirectJDKLog.java 173) -Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-10-27 12:57:50:525 [http-nio-0.0.0.0-8989-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet(FrameworkServlet.java 532) -Initializing Servlet 'dispatcherServlet'
2023-10-27 12:57:50:526 [http-nio-0.0.0.0-8989-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet(FrameworkServlet.java 554) -Completed initialization in 0 ms
2023-10-27 12:57:57:827 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 12:57:57:828 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/user/login
2023-10-27 12:57:57:829 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 登录
2023-10-27 12:57:57:830 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : POST
2023-10-27 12:57:57:831 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.LoginController.login
2023-10-27 12:57:57:832 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 12:57:57:834 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : [{"password":"1234","userName":"sg"}]
2023-10-27 12:57:57:996 [http-nio-0.0.0.0-8989-exec-5] INFO  com.zaxxer.hikari.HikariDataSource(HikariDataSource.java 110) -HikariPool-1 - Starting...
2023-10-27 12:57:58:388 [http-nio-0.0.0.0-8989-exec-5] INFO  com.zaxxer.hikari.pool.HikariPool(HikariPool.java 565) -HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@77f6cb2c
2023-10-27 12:57:58:390 [http-nio-0.0.0.0-8989-exec-5] INFO  com.zaxxer.hikari.HikariDataSource(HikariDataSource.java 123) -HikariPool-1 - Start completed.
2023-10-27 12:57:59:089 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaXNzIjoiYngiLCJleHAiOjE2OTg0NjkwNzgsImlhdCI6MTY5ODM4MjY3OCwianRpIjoiNWI3N2ViYWItNzU2Ni00ZmU2LTlkMGItNGY1NWRlNTRhNTBhIn0.3KCaUwD1g6Yz1L1quXd5wsj1zw2a75FeLM_kpLzJECU"},"msg":"操作成功"}
2023-10-27 12:57:59:089 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:01:24:522 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:01:24:522 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/article/list
2023-10-27 13:01:24:522 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询文章列表
2023-10-27 13:01:24:522 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:01:24:523 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.articleList
2023-10-27 13:01:24:523 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:01:24:524 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : [1,2,{}]
2023-10-27 13:01:24:618 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"rows":[{"categoryId":1,"content":"## 课程介绍\n![image20211219121555979.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/e7131718e9e64faeaf3fe16404186eb4.png)\n\n## 0. 简介1\n\n​\t**Spring Security** 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架**Shiro**，它提供了更丰富的功能，社区资源也比Shiro丰富。\n\n​\t一般来说中大型的项目都是使用**SpringSecurity** 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。\n\n​\t 一般Web应用的需要进行**认证**和**授权**。\n\n​\t\t**认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户**\n\n​\t\t**授权：经过认证后判断当前用户是否有权限进行某个操作**\n\n​\t而认证和授权也是SpringSecurity作为安全框架的核心功能。\n\n\n\n## 1. 快速入门\n\n### 1.1 准备工作\n\n​\t我们先要搭建一个简单的SpringBoot工程\n\n① 设置父工程 添加依赖\n\n~~~~\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n~~~~\n\n② 创建启动类\n\n~~~~\n@SpringBootApplication\npublic class SecurityApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SecurityApplication.class,args);\n    }\n}\n\n~~~~\n\n③ 创建Controller\n\n~~~~java\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n}\n\n~~~~\n\n\n\n### 1.2 引入SpringSecurity\n\n​\t在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。\n\n~~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n~~~~\n\n​\t引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。\n\n​\t必须登陆之后才能对接口进行访问。\n\n\n\n## 2. 认证\n\n### 2.1 登陆校验流程\n![image20211215094003288.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/414a87eeed344828b5b00ffa80178958.png)","createTime":"2022-01-23 23:20:11","id":1,"isComment":"0","isTop":"1","status":"0","summary":"SpringSecurity框架教程-Spring Security+JWT实现项目级前端分离认证授权","thumbnail":"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/948597e164614902ab1662ba8452e106.png","title":"SpringSecurity从入门到精通","viewCount":114},{"categoryId":2,"content":"![Snipaste_20220115_165812.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/15/1d9d283f5d874b468078b183e4b98b71.png)\r\n\r\n## sda \r\n\r\n222\r\n### sdasd newnewnew","createTime":"2022-01-17 14:58:37","id":5,"isComment":"0","isTop":"1","status":"0","thumbnail":"","title":"sdad","viewCount":44}],"total":2},"msg":"操作成功"}
2023-10-27 13:01:24:619 [http-nio-0.0.0.0-8989-exec-9] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/user/login
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 登录
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : POST
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.LoginController.login
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:03:59:936 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : [{"password":"1234","userName":"sg"}]
2023-10-27 13:04:00:080 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaXNzIjoiYngiLCJleHAiOjE2OTg0Njk0NDAsImlhdCI6MTY5ODM4MzA0MCwianRpIjoiZjcwNzhjYmYtMjhlMC00OGRhLTlhMTEtOGQ0N2Y3OGJjMzhlIn0.IxBJnXdFF2Pg_fhvuQq26MxsZfd40lfpKsjnewRTtwM"},"msg":"操作成功"}
2023-10-27 13:04:00:086 [http-nio-0.0.0.0-8989-exec-1] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/getInfo
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 获取后台用户信息
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.LoginController.getInfo
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:04:00:099 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:04:00:136 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"permissions":["system:user:list","system:role:list","system:menu:list","system:user:query","system:user:add","system:user:edit","system:user:remove","system:user:export","system:user:import","system:user:resetPwd","system:role:query","system:role:add","system:role:edit","system:role:remove","system:role:export","system:menu:query","system:menu:add","system:menu:edit","system:menu:remove","content:category:list","content:article:list","content:tag:index","content:link:list","content:article:writer","content:link:add","content:link:edit","content:link:remove","content:link:query","content:category:export"],"roles":["admin"],"user":{"avatar":"http://s21taor9o.bkt.clouddn.com/2023/10/08/a75e7723e07c475a8163ce1b473b3388.jpg","email":"23412332@qq.com","id":1,"nickName":"rock","sex":"1"}},"msg":"操作成功"}
2023-10-27 13:04:00:136 [http-nio-0.0.0.0-8989-exec-4] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/getRouters
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 为前端动态路由提供数据
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.LoginController.getRouters
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:04:00:147 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:04:00:195 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"menus":[{"children":[],"component":"content/article/write/index","createTime":"2022-01-08 03:39:58","icon":"build","id":2023,"isFrame":1,"menuName":"写博文","menuType":"C","parentId":0,"path":"write","perms":"content:article:writer","status":"0","visible":"0"},{"children":[{"children":[],"component":"system/user/index","createTime":"2021-11-12 10:46:19","icon":"user","id":100,"isFrame":1,"menuName":"用户管理","menuType":"C","parentId":1,"path":"user","perms":"system:user:list","status":"0","visible":"0"},{"children":[],"component":"system/role/index","createTime":"2021-11-12 10:46:19","icon":"peoples","id":101,"isFrame":1,"menuName":"角色管理","menuType":"C","parentId":1,"path":"role","perms":"system:role:list","status":"0","visible":"0"},{"children":[],"component":"system/menu/index","createTime":"2021-11-12 10:46:19","icon":"tree-table","id":102,"isFrame":1,"menuName":"菜单管理","menuType":"C","parentId":1,"path":"menu","perms":"system:menu:list","status":"0","visible":"0"}],"createTime":"2021-11-12 10:46:19","icon":"system","id":1,"isFrame":1,"menuName":"系统管理","menuType":"M","parentId":0,"path":"system","perms":"","status":"0","visible":"0"},{"children":[{"children":[],"component":"content/article/index","createTime":"2022-01-08 02:53:10","icon":"build","id":2019,"isFrame":1,"menuName":"文章管理","menuType":"C","parentId":2017,"path":"article","perms":"content:article:list","status":"0","visible":"0"},{"children":[],"component":"content/category/index","createTime":"2022-01-08 02:51:45","icon":"example","id":2018,"isFrame":1,"menuName":"分类管理","menuType":"C","parentId":2017,"path":"category","perms":"content:category:list","status":"0","visible":"0"},{"children":[],"component":"content/link/index","createTime":"2022-01-08 02:56:50","icon":"404","id":2022,"isFrame":1,"menuName":"友链管理","menuType":"C","parentId":2017,"path":"link","perms":"content:link:list","status":"0","visible":"0"},{"children":[],"component":"content/tag/index","createTime":"2022-01-08 02:55:37","icon":"button","id":2021,"isFrame":1,"menuName":"标签管理","menuType":"C","parentId":2017,"path":"tag","perms":"content:tag:index","status":"0","visible":"0"}],"createTime":"2022-01-08 02:44:38","icon":"table","id":2017,"isFrame":1,"menuName":"内容管理","menuType":"M","parentId":0,"path":"content","perms":"","status":"0","visible":"0"}]},"msg":"操作成功"}
2023-10-27 13:04:00:195 [http-nio-0.0.0.0-8989-exec-5] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:04:03:544 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:04:03:545 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/category/listAllCategory
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/tag/listAllTag
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询所有分类
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询所有标签
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.listAllCategory
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.listAllTag
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:04:03:546 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:04:03:576 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":[{"id":1,"name":"Mybatis"},{"id":4,"name":"Java"},{"id":6,"name":"c#"},{"id":7,"name":"MybatisPlus"}],"msg":"操作成功"}
2023-10-27 13:04:03:576 [http-nio-0.0.0.0-8989-exec-2] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:04:03:576 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":[{"description":"wsd","id":1,"name":"java"},{"description":"wsd","id":2,"name":"PHP"}],"msg":"操作成功"}
2023-10-27 13:04:03:576 [http-nio-0.0.0.0-8989-exec-3] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/article/list
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询文章列表
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.articleList
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:05:24:060 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : [1,10,{}]
2023-10-27 13:05:24:112 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":{"rows":[{"categoryId":1,"content":"## 课程介绍\n![image20211219121555979.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/e7131718e9e64faeaf3fe16404186eb4.png)\n\n## 0. 简介1\n\n​\t**Spring Security** 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架**Shiro**，它提供了更丰富的功能，社区资源也比Shiro丰富。\n\n​\t一般来说中大型的项目都是使用**SpringSecurity** 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。\n\n​\t 一般Web应用的需要进行**认证**和**授权**。\n\n​\t\t**认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户**\n\n​\t\t**授权：经过认证后判断当前用户是否有权限进行某个操作**\n\n​\t而认证和授权也是SpringSecurity作为安全框架的核心功能。\n\n\n\n## 1. 快速入门\n\n### 1.1 准备工作\n\n​\t我们先要搭建一个简单的SpringBoot工程\n\n① 设置父工程 添加依赖\n\n~~~~\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n~~~~\n\n② 创建启动类\n\n~~~~\n@SpringBootApplication\npublic class SecurityApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SecurityApplication.class,args);\n    }\n}\n\n~~~~\n\n③ 创建Controller\n\n~~~~java\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n}\n\n~~~~\n\n\n\n### 1.2 引入SpringSecurity\n\n​\t在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。\n\n~~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n~~~~\n\n​\t引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。\n\n​\t必须登陆之后才能对接口进行访问。\n\n\n\n## 2. 认证\n\n### 2.1 登陆校验流程\n![image20211215094003288.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/414a87eeed344828b5b00ffa80178958.png)","createTime":"2022-01-23 23:20:11","id":1,"isComment":"0","isTop":"1","status":"0","summary":"SpringSecurity框架教程-Spring Security+JWT实现项目级前端分离认证授权","thumbnail":"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/948597e164614902ab1662ba8452e106.png","title":"SpringSecurity从入门到精通","viewCount":114},{"categoryId":2,"content":"![Snipaste_20220115_165812.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/15/1d9d283f5d874b468078b183e4b98b71.png)\r\n\r\n## sda \r\n\r\n222\r\n### sdasd newnewnew","createTime":"2022-01-17 14:58:37","id":5,"isComment":"0","isTop":"1","status":"0","thumbnail":"","title":"sdad","viewCount":44}],"total":2},"msg":"操作成功"}
2023-10-27 13:05:24:113 [http-nio-0.0.0.0-8989-exec-10] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:10:39:423 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:10:39:423 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 51) -=======Start=======
2023-10-27 13:10:39:427 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/tag/listAllTag
2023-10-27 13:10:39:427 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 53) -URL            : http://localhost:8989/content/category/listAllCategory
2023-10-27 13:10:39:427 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询所有标签
2023-10-27 13:10:39:427 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 55) -BusinessName   : 查询所有分类
2023-10-27 13:10:39:427 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 57) -HTTP Method    : GET
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.listAllCategory
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 59) -Class Method   : org.example.controller.ContentController.listAllTag
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 61) -IP             : 127.0.0.1
2023-10-27 13:10:39:428 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 63) -Request Args   : []
2023-10-27 13:10:39:453 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":[{"id":1,"name":"Mybatis"},{"id":4,"name":"Java"},{"id":6,"name":"c#"},{"id":7,"name":"MybatisPlus"}],"msg":"操作成功"}
2023-10-27 13:10:39:453 [http-nio-0.0.0.0-8989-exec-8] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:10:39:459 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 76) -Response       : {"code":200,"data":[{"description":"wsd","id":1,"name":"java"},{"description":"wsd","id":2,"name":"PHP"}],"msg":"操作成功"}
2023-10-27 13:10:39:459 [http-nio-0.0.0.0-8989-exec-7] INFO  org.example.aspect.LogAspect(LogAspect.java 37) -=======End=======

2023-10-27 13:13:28:136 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource(HikariDataSource.java 350) -HikariPool-1 - Shutdown initiated...
2023-10-27 13:13:28:143 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource(HikariDataSource.java 352) -HikariPool-1 - Shutdown completed.
