/*
 Navicat Premium Data Transfer

 Source Server         : test
 Source Server Type    : MySQL
 Source Server Version : 50718 (5.7.18-cynos-log)
 Source Host           : sh-cynosdbmysql-grp-cbbmajng.sql.tencentcdb.com:24095
 Source Schema         : sg_blog

 Target Server Type    : MySQL
 Target Server Version : 50718 (5.7.18-cynos-log)
 File Encoding         : 65001

 Date: 28/01/2024 17:52:58
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for sg_article
-- ----------------------------
DROP TABLE IF EXISTS `sg_article`;
CREATE TABLE `sg_article`  (
  `id` bigint(200) NOT NULL AUTO_INCREMENT,
  `title` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '文章内容',
  `summary` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章摘要',
  `category_id` bigint(20) NULL DEFAULT NULL COMMENT '所属分类id',
  `thumbnail` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '缩略图',
  `is_top` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '是否置顶（0否，1是）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '1' COMMENT '状态（0已发布，1草稿）',
  `view_count` bigint(200) NULL DEFAULT 0 COMMENT '访问量',
  `is_comment` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '1' COMMENT '是否允许评论 1是，0否',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_article
-- ----------------------------
INSERT INTO `sg_article` VALUES (1, 'SpringSecurity从入门到精通', '## 课程介绍\n![image20211219121555979.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/e7131718e9e64faeaf3fe16404186eb4.png)\n\n## 0. 简介1\n\n​	**Spring Security** 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架**Shiro**，它提供了更丰富的功能，社区资源也比Shiro丰富。\n\n​	一般来说中大型的项目都是使用**SpringSecurity** 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。\n\n​	 一般Web应用的需要进行**认证**和**授权**。\n\n​		**认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户**\n\n​		**授权：经过认证后判断当前用户是否有权限进行某个操作**\n\n​	而认证和授权也是SpringSecurity作为安全框架的核心功能。\n\n\n\n## 1. 快速入门\n\n### 1.1 准备工作\n\n​	我们先要搭建一个简单的SpringBoot工程\n\n① 设置父工程 添加依赖\n\n~~~~\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n~~~~\n\n② 创建启动类\n\n~~~~\n@SpringBootApplication\npublic class SecurityApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SecurityApplication.class,args);\n    }\n}\n\n~~~~\n\n③ 创建Controller\n\n~~~~java\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"hello\";\n    }\n}\n\n~~~~\n\n\n\n### 1.2 引入SpringSecurity\n\n​	在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。\n\n~~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n~~~~\n\n​	引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。\n\n​	必须登陆之后才能对接口进行访问。\n\n\n\n## 2. 认证\n\n### 2.1 登陆校验流程\n![image20211215094003288.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/414a87eeed344828b5b00ffa80178958.png)', 'SpringSecurity框架教程-Spring Security+JWT实现项目级前端分离认证授权', 1, 'https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/948597e164614902ab1662ba8452e106.png', '1', '0', 86, '0', NULL, '2022-01-23 23:20:11', NULL, NULL, 0);
INSERT INTO `sg_article` VALUES (2, 'weq', 'adadaeqe', 'adad', 2, 'https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/15/fd2e9460c58a4af3bbeae5d9ed581688.png', '1', '0', 22, '0', NULL, '2022-01-21 14:58:30', NULL, NULL, 1);
INSERT INTO `sg_article` VALUES (3, 'dad', 'asdasda', 'sadad', 1, 'https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/15/737a0ed0b8ea430d8700a12e76aa1cd1.png', '1', '0', 33, '0', NULL, '2022-01-18 14:58:34', NULL, NULL, 1);
INSERT INTO `sg_article` VALUES (5, 'sdad', '![Snipaste_20220115_165812.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/15/1d9d283f5d874b468078b183e4b98b71.png)\r\n\r\n## sda \r\n\r\n222\r\n### sdasd newnewnew', NULL, 2, '', '1', '0', 51, '0', NULL, '2022-01-17 14:58:37', NULL, NULL, 0);
INSERT INTO `sg_article` VALUES (8, 'SpringBoot项目实战-前后端分离博客系统', '# 项目实战-前后端分离博客系统\n\n## 1.课程介绍\n\n* 纯后端讲解\n* 完整的前台后台代码编写\n* 主流技术栈（SpringBoot,MybatisPlus,SpringSecurity,EasyExcel,Swagger2,Redis,Echarts,Vue,ElementUI....）\n* 完善细致的需求分析\n* 由易到难循序渐进\n  \n  \n\n## 2.创建工程\n\n​    我们有前台和后台两套系统。两套系统的前端工程都已经提供好了。所以我们只需要写两套系统的后端。\n\n​    但是大家思考下，实际上两套后端系统的很多内容是可能重复的。这里如果我们只是单纯的创建两个后端工程。那么就会有大量的重复代码，并且需要修改的时候也需要修改两次。这就是代码复用性不高。\n\n​    所以我们需要创建多模块项目，两套系统可能都会用到的代码可以写到一个公共模块中，让前台系统和后台系统分别取依赖公共模块。\n\n\n\n① 创建父模块\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.sangeng</groupId>\n    <artifactId>SGBlog</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>sangeng-framework</module>\n        <module>sangeng-admin</module>\n        <module>sangeng-blog</module>\n    </modules>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencyManagement>\n\n\n    <dependencies>\n        <!-- SpringBoot的依赖配置-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.5.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <!--fastjson依赖-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.33</version>\n        </dependency>\n        <!--jwt依赖-->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.9.0</version>\n        </dependency>\n        <!--mybatisPlus依赖-->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.3</version>\n        </dependency>\n\n        <!--阿里云OSS-->\n        <dependency>\n            <groupId>com.aliyun.oss</groupId>\n            <artifactId>aliyun-sdk-oss</artifactId>\n            <version>3.10.2</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>easyexcel</artifactId>\n            <version>3.0.5</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n    </dependencies>\n\n\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n\n\n\n②创建公共子模块 sangeng-framework\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>SGBlog</artifactId>\n        <groupId>com.sangeng</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>sangeng-framework</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <!--lombk-->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!--junit-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!--SpringSecurity启动器-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <!--redis依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <!--fastjson依赖-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n        </dependency>\n        <!--jwt依赖-->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n        </dependency>\n        <!--mybatisPlus依赖-->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        <!--mysql数据库驱动-->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n\n        <!--阿里云OSS-->\n        <dependency>\n            <groupId>com.aliyun.oss</groupId>\n            <artifactId>aliyun-sdk-oss</artifactId>\n        </dependency>\n\n        <!--AOP-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>easyexcel</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n        </dependency>\n\n    </dependencies>\n</project>\n\n```\n\n\n\n③创建博客后台模块sangeng-admin\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>SGBlog</artifactId>\n        <groupId>com.sangeng</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>sangeng-admin</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.sangeng</groupId>\n            <artifactId>sangeng-framework</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n</project>\n\n```\n\n④创建博客前台模块sangeng-blog\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>SGBlog</artifactId>\n        <groupId>com.sangeng</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>sangeng-blog</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.sangeng</groupId>\n            <artifactId>sangeng-framework</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n\n\n\n## 3.博客前台\n\n### 3.0 准备工作\n\n#### 3.1 SpringBoot和MybatisPuls整合配置测试\n\n①创建启动类\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@SpringBootApplication\n@MapperScan(\"com.sangeng.mapper\")\npublic class SanGengBlogApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SanGengBlogApplication.class,args);\n    }\n}\n```\n\n②创建application.yml配置文件\n\n```yml\nserver:\n  port: 7777\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/sg_blog?characterEncoding=utf-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n\n```\n\n③ SQL语句\n\n​    SQL脚本：SGBlog\\资源\\SQL\\sg_article.sql\n\n④ 创建实体类，Mapper，Service \n\n​    注意思考这些文件应该写在哪个模块下？\n\n```java\n@SuppressWarnings(\"serial\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"sg_article\")\npublic class Article  {\n    @TableId\n    private Long id;\n    //标题\n    private String title;\n    //文章内容\n    private String content;\n    //文章类型:1 文章 2草稿\n    private String type;\n    //文章摘要\n    private String summary;\n    //所属分类id\n    private Long categoryId;\n    //缩略图\n    private String thumbnail;\n    //是否置顶（0否，1是）\n    private String isTop;\n    //状态（0已发布，1草稿）\n    private String status;\n    //评论数\n    private Integer commentCount;\n    //访问量\n    private Long viewCount;\n    //是否允许评论 1是，0否\n    private String isComment;\n\n    private Long createBy;\n\n    private Date createTime;\n\n    private Long updateBy;\n\n    private Date updateTime;\n    //删除标志（0代表未删除，1代表已删除）\n    private Integer delFlag;\n\n}\n\n\n```\n\n```java\npublic interface ArticleMapper extends BaseMapper<Article> {\n\n\n}\n\n```\n\n```java\npublic interface ArticleService extends IService<Article> {\n}\n\n```\n\n```java\n@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n}\n```\n\n\n\n⑤ 创建Controller测试接口\n\n​    注意思考这些文件应该写在哪个模块下？\n\n```java\n@RestController\n@RequestMapping(\"/article\")\npublic class ArticleController {\n\n    @Autowired\n    private ArticleService articleService;\n\n    @GetMapping(\"/list\")\n    public List<Article> test(){\n        return articleService.list();\n    }\n}\n\n```\n\n​    我们可以暂时先注释掉sangeng-framework中的SpringSecurity依赖方便测试\n\n\n\n### 3.1 热门文章列表\n\n#### 3.1.0 文章表分析\n\n​    通过需求去分析需要有哪些字段。\n\n#### 3.1.1 需求\n\n​    需要查询浏览量最高的前10篇文章的信息。要求展示文章标题和浏览量。把能让用户自己点击跳转到具体的文章详情进行浏览。\n\n​    注意：不能把草稿展示出来，不能把删除了的文章查询出来。要按照浏览量进行降序排序。\n\n#### 3.1.2 接口设计\n\n​    见接口文档\n\n#### 3.1.3 基础版本代码实现\n\n①准备工作\n\n统一响应类和响应枚举\n\n```java\npackage com.sangeng.domain;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.sangeng.enums.AppHttpCodeEnum;\n\nimport java.io.Serializable;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class ResponseResult<T> implements Serializable {\n    private Integer code;\n    private String msg;\n    private T data;\n\n    public ResponseResult() {\n        this.code = AppHttpCodeEnum.SUCCESS.getCode();\n        this.msg = AppHttpCodeEnum.SUCCESS.getMsg();\n    }\n\n    public ResponseResult(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    public ResponseResult(Integer code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public ResponseResult(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public static ResponseResult errorResult(int code, String msg) {\n        ResponseResult result = new ResponseResult();\n        return result.error(code, msg);\n    }\n    public static ResponseResult okResult() {\n        ResponseResult result = new ResponseResult();\n        return result;\n    }\n    public static ResponseResult okResult(int code, String msg) {\n        ResponseResult result = new ResponseResult();\n        return result.ok(code, null, msg);\n    }\n\n    public static ResponseResult okResult(Object data) {\n        ResponseResult result = setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());\n        if(data!=null) {\n            result.setData(data);\n        }\n        return result;\n    }\n\n    public static ResponseResult errorResult(AppHttpCodeEnum enums){\n        return setAppHttpCodeEnum(enums,enums.getMsg());\n    }\n\n    public static ResponseResult errorResult(AppHttpCodeEnum enums, String msg){\n        return setAppHttpCodeEnum(enums,msg);\n    }\n\n    public static ResponseResult setAppHttpCodeEnum(AppHttpCodeEnum enums){\n        return okResult(enums.getCode(),enums.getMsg());\n    }\n\n    private static ResponseResult setAppHttpCodeEnum(AppHttpCodeEnum enums, String msg){\n        return okResult(enums.getCode(),msg);\n    }\n\n    public ResponseResult<?> error(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n        return this;\n    }\n\n    public ResponseResult<?> ok(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n        return this;\n    }\n\n    public ResponseResult<?> ok(Integer code, T data, String msg) {\n        this.code = code;\n        this.data = data;\n        this.msg = msg;\n        return this;\n    }\n\n    public ResponseResult<?> ok(T data) {\n        this.data = data;\n        return this;\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n\n\n}\n```\n\n```java\npackage com.sangeng.enums;\n\npublic enum AppHttpCodeEnum {\n    // 成功\n    SUCCESS(200,\"操作成功\"),\n    // 登录\n    NEED_LOGIN(401,\"需要登录后操作\"),\n    NO_OPERATOR_AUTH(403,\"无权限操作\"),\n    SYSTEM_ERROR(500,\"出现错误\"),\n    USERNAME_EXIST(501,\"用户名已存在\"),\n     PHONENUMBER_EXIST(502,\"手机号已存在\"), EMAIL_EXIST(503, \"邮箱已存在\"),\n    REQUIRE_USERNAME(504, \"必需填写用户名\"),\n    LOGIN_ERROR(505,\"用户名或密码错误\");\n    int code;\n    String msg;\n\n    AppHttpCodeEnum(int code, String errorMessage){\n        this.code = code;\n        this.msg = errorMessage;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n\n```\n\n\n\n② 代码实现\n\n```java\n@RestController\n@RequestMapping(\"/article\")\npublic class ArticleController {\n\n    @Autowired\n    private ArticleService articleService;\n\n    @GetMapping(\"/hotArticleList\")\n    public ResponseResult hotArticleList(){\n\n        ResponseResult result =  articleService.hotArticleList();\n        return result;\n    }\n}\n\n```\n\n```java\npublic interface ArticleService extends IService<Article> {\n    ResponseResult hotArticleList();\n}\n\n```\n\n```java\n@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n    @Override\n    public ResponseResult hotArticleList() {\n        //查询热门文章 封装成ResponseResult返回\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<>();\n        //必须是正式文章\n        queryWrapper.eq(Article::getStatus,0);\n        //按照浏览量进行排序\n        queryWrapper.orderByDesc(Article::getViewCount);\n        //最多只查询10条\n        Page<Article> page = new Page(1,10);\n        page(page,queryWrapper);\n\n        List<Article> articles = page.getRecords();\n        return ResponseResult.okResult(articles);\n    }\n}\n\n```\n\n\n\n\n\n③ 解决跨域问题\n\n```java\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n      // 设置允许跨域的路径\n        registry.addMapping(\"/**\")\n                // 设置允许跨域请求的域名\n                .allowedOriginPatterns(\"*\")\n                // 是否允许cookie\n                .allowCredentials(true)\n                // 设置允许的请求方式\n                .allowedMethods(\"GET\", \"POST\", \"DELETE\", \"PUT\")\n                // 设置允许的header属性\n                .allowedHeaders(\"*\")\n                // 跨域允许时间\n                .maxAge(3600);\n    }\n\n}\n```\n\n\n\n\n\n#### 3.1.4 使用VO优化\n\n​    目前我们的响应格式其实是不符合接口文档的标准的，多返回了很多字段。这是因为我们查询出来的结果是Article来封装的，Article中字段比较多。\n\n​    我们在项目中一般最后还要把VO来接受查询出来的结果。一个接口对应一个VO，这样即使接口响应字段要修改也只要改VO即可。\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class HotArticleVo {\n    private Long id;\n    //标题\n    private String title;\n\n    //访问量\n    private Long viewCount;\n}\n\n```\n\n```java\n@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n    @Override\n    public ResponseResult hotArticleList() {\n        //查询热门文章 封装成ResponseResult返回\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<>();\n        //必须是正式文章\n        queryWrapper.eq(Article::getStatus,0);\n        //按照浏览量进行排序\n        queryWrapper.orderByDesc(Article::getViewCount);\n        //最多只查询10条\n        Page<Article> page = new Page(1,10);\n        page(page,queryWrapper);\n\n        List<Article> articles = page.getRecords();\n        //bean拷贝\n        List<HotArticleVo> articleVos = new ArrayList<>();\n        for (Article article : articles) {\n            HotArticleVo vo = new HotArticleVo();\n            BeanUtils.copyProperties(article,vo);\n            articleVos.add(vo);\n        }\n\n        return ResponseResult.okResult(articleVos);\n    }\n}\n```\n\n#### 3.1.5 字面值处理\n\n​    实际项目中都不允许直接在代码中使用字面值。都需要定义成常量来使用。这种方式有利于提高代码的可维护性。\n\n```java\npublic class SystemConstants\n{\n    /**\n     *  文章是草稿\n     */\n    public static final int ARTICLE_STATUS_DRAFT = 1;\n    /**\n     *  文章是正常分布状态\n     */\n    public static final int ARTICLE_STATUS_NORMAL = 0;\n\n}\n```\n\n```java\n@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n    @Override\n    public ResponseResult hotArticleList() {\n        //查询热门文章 封装成ResponseResult返回\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<>();\n        //必须是正式文章\n        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_NORMAL);\n        //按照浏览量进行排序\n        queryWrapper.orderByDesc(Article::getViewCount);\n        //最多只查询10条\n        Page<Article> page = new Page(1,10);\n        page(page,queryWrapper);\n\n        List<Article> articles = page.getRecords();\n        //bean拷贝\n        List<HotArticleVo> articleVos = new ArrayList<>();\n        for (Article article : articles) {\n            HotArticleVo vo = new HotArticleVo();\n            BeanUtils.copyProperties(article,vo);\n            articleVos.add(vo);\n        }\n\n        return ResponseResult.okResult(articleVos);\n    }\n}\n```\n\n\n\n\n\n### 3.2 Bean拷贝工具类封装\n\n```java\npublic class BeanCopyUtils {\n\n    private BeanCopyUtils() {\n    }\n\n    public static <V> V copyBean(Object source,Class<V> clazz) {\n        //创建目标对象\n        V result = null;\n        try {\n            result = clazz.newInstance();\n            //实现属性copy\n            BeanUtils.copyProperties(source, result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //返回结果\n        return result;\n    }\n    public static <O,V> List<V> copyBeanList(List<O> list,Class<V> clazz){\n        return list.stream()\n                .map(o -> copyBean(o, clazz))\n                .collect(Collectors.toList());\n    }\n}\n\n```\n\n\n\n\n\n### 3.2 查询分类列表\n\n#### 3.2.0 分类表分析\n\n​        通过需求去分析需要有哪些字段。\n\n​        建表SQL及初始化数据见：SGBlog\\资源\\SQL\\sg_category.sql\n\n#### 3.2.1 需求\n\n![image-20220202111056036](img/image-20220202111056036-16437714601701.png)\n\n​    页面上需要展示分类列表，用户可以点击具体的分类查看该分类下的文章列表。\n\n​    注意： ①要求只展示有发布正式文章的分类 ②必须是正常状态的分类\n\n\n\n#### 3.2.2 接口设计\n\n​    见接口文档\n\n#### 3.2.3 EasyCode代码模板\n\n```java\n##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"$!{tableInfo.obj.name}\")\npublic class $!{tableInfo.name}  {\n#foreach($column in $tableInfo.pkColumn)\n    #if(${column.comment})//${column.comment}#end\n@TableId\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n\n\n}\n\n```\n\n```java\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\n\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n\n```\n\n```java\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\n\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n\n```\n\n\n\n```java\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n\n```\n\n\n\n#### 3.2.4 代码实现\n\n```java\n@RestController\n@RequestMapping(\"/category\")\npublic class CategoryController {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    @GetMapping(\"/getCategoryList\")\n    public ResponseResult getCategoryList(){\n       return categoryService.getCategoryList();\n    }\n}\n\n\n```\n\n```java\npublic interface CategoryService extends IService<Category> {\n\n\n    ResponseResult getCategoryList();\n\n}\n```\n\n```java\n@Service(\"categoryService\")\npublic class CategoryServiceImpl extends ServiceImpl<CategoryMapper, Category> implements CategoryService {\n\n    @Autowired\n    private ArticleService articleService;\n\n    @Override\n    public ResponseResult getCategoryList() {\n        //查询文章表  状态为已发布的文章\n        LambdaQueryWrapper<Article> articleWrapper = new LambdaQueryWrapper<>();\n        articleWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);\n        List<Article> articleList = articleService.list(articleWrapper);\n        //获取文章的分类id，并且去重\n        Set<Long> categoryIds = articleList.stream()\n                .map(article -> article.getCategoryId())\n                .collect(Collectors.toSet());\n\n        //查询分类表\n        List<Category> categories = listByIds(categoryIds);\n        categories = categories.stream().\n                filter(category -> SystemConstants.STATUS_NORMAL.equals(category.getStatus()))\n                .collect(Collectors.toList());\n        //封装vo\n        List<CategoryVo> categoryVos = BeanCopyUtils.copyBeanList(categories, CategoryVo.class);\n\n        return ResponseResult.okResult(categoryVos);\n    }\n}\n\n```\n\n\n\n### 3.3 分页查询文章列表\n\n#### 3.3.1 需求\n\n​    在首页和分类页面都需要查询文章列表。\n\n​    首页：查询所有的文章\n\n​    分类页面：查询对应分类下的文章\n\n​    要求：①只能查询正式发布的文章 ②置顶的文章要显示在最前面 \n\n#### 3.3.2 接口设计\n\n​    见文档\n\n#### 3.3.3 代码实现\n\nMP支持分页配置\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@Configuration\npublic class MbatisPlusConfig {\n\n    /**\n     * 3.4.0之后版本\n     * @return\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n```\n\n在ArticleController中\n\n```java\n    @GetMapping(\"/articleList\")\n    public ResponseResult articleList(Integer pageNum,Integer pageSize,Long categoryId){\n        return articleService.articleList(pageNum,pageSize,categoryId);\n    }\n```\n\n在ArticleService中\n\n```java\nResponseResult articleList(Integer pageNum, Integer pageSize, Long categoryId);\n```\n\n在ArticleServiceImpl中\n\n```java\n\n@Service\npublic class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {\n\n    @Autowired\n    private CategoryService categoryService;\n\n    @Override\n    public ResponseResult hotArticleList() {\n        //查询热门文章 封装成ResponseResult返回\n        LambdaQueryWrapper<Article> queryWrapper = new LambdaQueryWrapper<>();\n        //必须是正式文章\n        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_NORMAL);\n        //按照浏览量进行排序\n        queryWrapper.orderByDesc(Article::getViewCount);\n        //最多只查询10条\n        Page<Article> page = new Page(1,10);\n        page(page,queryWrapper);\n\n        List<Article> articles = page.getRecords();\n        //bean拷贝\n//        List<HotArticleVo> articleVos = new ArrayList<>();\n//        for (Article article : articles) {\n//            HotArticleVo vo = new HotArticleVo();\n//            BeanUtils.copyProperties(article,vo);\n//            articleVos.add(vo);\n//        }\n        List<HotArticleVo> vs = BeanCopyUtils.copyBeanList(articles, HotArticleVo.class);\n        return ResponseResult.okResult(vs);\n    }\n\n    @Override\n    public ResponseResult articleList(Integer pageNum, Integer pageSize, Long categoryId) {\n        //查询条件\n        LambdaQueryWrapper<Article> lambdaQueryWrapper = new LambdaQueryWrapper<>();\n        // 如果 有categoryId 就要 查询时要和传入的相同\n        lambdaQueryWrapper.eq(Objects.nonNull(categoryId)&&categoryId>0 ,Article::getCategoryId,categoryId);\n        // 状态是正式发布的\n        lambdaQueryWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);\n        // 对isTop进行降序\n        lambdaQueryWrapper.orderByDesc(Article::getIsTop);\n\n        //分页查询\n        Page<Article> page = new Page<>(pageNum,pageSize);\n        page(page,lambdaQueryWrapper);\n\n        List<Article> articles = page.getRecords();\n        //查询categoryName\n        articles.stream()\n                .map(article -> article.setCategoryName(categoryService.getById(article.getCategoryId()).getName()))\n                .collect(Collectors.toList());\n        //articleId去查询articleName进行设置\n//        for (Article article : articles) {\n//            Category category = categoryService.getById(article.getCategoryId());\n//            article.setCategoryName(category.getName());\n//        }\n\n        //封装查询结果\n        List<ArticleListVo> articleListVos = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);\n\n        PageVo pageVo = new PageVo(articleListVos,page.getTotal());\n        return ResponseResult.okResult(pageVo);\n    }\n}\n```\n\n\n\nPageVo\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class PageVo {\n    private List rows;\n    private Long total;\n}\n\n```\n\nArticleListVo\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ArticleListVo {\n\n    private Long id;\n    //标题\n    private String title;\n    //文章摘要\n    private String summary;\n    //所属分类名\n    private String categoryName;\n    //缩略图\n    private String thumbnail;\n\n\n    //访问量\n    private Long viewCount;\n\n    private Date createTime;\n\n\n}\n```\n\n在Article中增加一个字段\n\n```java\n    @TableField(exist = false)\n    private String categoryName;\n```\n\n\n\n#### 3.3.4 FastJson配置\n\n```java\n    @Bean//使用@Bean注入fastJsonHttpMessageConvert\n    public HttpMessageConverter fastJsonHttpMessageConverters() {\n        //1.需要定义一个Convert转换消息的对象\n        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\n        fastJsonConfig.setDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);\n\n        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        HttpMessageConverter<?> converter = fastConverter;\n        return converter;\n    }\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(fastJsonHttpMessageConverters());\n    }\n```\n\n###### FastJson2配置如下:\n\n```java\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        // 创建 FastJsonHttpMessageConverter 对象\n        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();\n        // 创建 FastJson 的配置对象\n        FastJsonConfig config = new FastJsonConfig();\n        // 设置日期格式为 \"yyyy-MM-dd HH:mm:ss\"\n        config.setDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        // 设置 JSONReader 特性，这里使用 FieldBased 和 SupportArrayToBean\n        config.setReaderFeatures(JSONReader.Feature.FieldBased, JSONReader.Feature.SupportArrayToBean);\n        // 设置 JSONWriter 特性，这里使用 WriteMapNullValue 和 PrettyFormat\n        config.setWriterFeatures(JSONWriter.Feature.WriteMapNullValue, JSONWriter.Feature.PrettyFormat);\n        // 将配置应用到 FastJsonHttpMessageConverter\n        converter.setFastJsonConfig(config);\n        // 设置默认字符集为 UTF-8\n        converter.setDefaultCharset(StandardCharsets.UTF_8);\n        // 设置支持的媒体类型为 APPLICATION_JSON\n        converter.setSupportedMediaTypes(Collections.singletonList(MediaType.APPLICATION_JSON));\n        // 将 FastJsonHttpMessageConverter 添加到 converters 列表的首位\n        converters.add(0, converter);\n    }\n```\n\n### 3.4 文章详情接口\n\n#### 3.4.1 需求\n\n​    要求在文章列表点击阅读全文时能够跳转到文章详情页面，可以让用户阅读文章正文。\n\n​    要求：①要在文章详情中展示其分类名\n\n#### 3.4.2 接口设计\n\n| 请求方式 | 请求路径          |\n| ---- | ------------- |\n| Get  | /article/{id} |\n\n响应格式：\n\n```json\n{\n  \"code\": 200,\n  \"data\": {\n    \"categoryId\": \"1\",\n    \"categoryName\": \"java\",\n    \"content\": \"内容\",\n    \"createTime\": \"2022-01-23 23:20:11\",\n    \"id\": \"1\",\n    \"isComment\": \"0\",\n    \"title\": \"SpringSecurity从入门到精通\",\n    \"viewCount\": \"114\"\n  },\n  \"msg\": \"操作成功\"\n}\n```\n\n#### 3.4.3 代码实现\n\nArticleController中新增\n\n```java\n    @GetMapping(\"/{id}\")\n    public ResponseResult getArticleDetail(@PathVariable(\"id\") Long id){\n        return articleService.getArticleDetail(id);\n    }\n```\n\n\n\nService\n\n```java\nResponseResult getArticleDetail(Long id);\n```\n\n\n\nServiceImpl\n\n```java\n    @Override\n    public ResponseResult getArticleDetail(Long id) {\n        //根据id查询文章\n        Article article = getById(id);\n        //转换成VO\n        ArticleDetailVo articleDetailVo = BeanCopyUtils.copyBean(article, ArticleDetailVo.class);\n        //根据分类id查询分类名\n        Long categoryId = articleDetailVo.getCategoryId();\n        Category category = categoryService.getById(categoryId);\n        if(category!=null){\n            articleDetailVo.setCategoryName(category.getName());\n        }\n        //封装响应返回\n        return ResponseResult.okResult(articleDetailVo);\n    }\n```\n\n\n\n\n\n### 3.5 友联查询\n\n#### 3.5.0 友链表分析\n\n​    通过需求去分析需要有哪些字段。\n\n​    建表SQL及初始化数据见：SGBlog\\资源\\SQL\\sg_link.sql    \n\n#### 3.5.1 需求\n\n​    在友链页面要查询出所有的审核通过的友链。\n\n#### 3.5.2 接口设计\n\n| 请求方式 | 请求路径             |\n| ---- | ---------------- |\n| Get  | /link/getAllLink |\n\n响应格式：\n\n```json\n{\n  \"code\": 200,\n  \"data\": [\n    {\n      \"address\": \"https://www.baidu.com\",\n      \"description\": \"sda\",\n      \"id\": \"1\",\n      \"logo\": \"图片url1\",\n      \"name\": \"sda\"\n    },\n    {\n      \"address\": \"https://www.qq.com\",\n      \"description\": \"dada\",\n      \"id\": \"2\",\n      \"logo\": \"图片url2\",\n      \"name\": \"sda\"\n    }\n  ],\n  \"msg\": \"操作成功\"\n}\n```\n\n\n\n#### 3.5.3 代码实现\n\nController\n\n```java\n@RestController\n@RequestMapping(\"/link\")\npublic class LinkController {\n\n    @Autowired\n    private LinkService linkService;\n\n    @GetMapping(\"/getAllLink\")\n    public ResponseResult getAllLink(){\n        return linkService.getAllLink();\n    }\n}\n\n```\n\n\n\nService\n\n```java\npublic interface LinkService extends IService<Link> {\n\n    ResponseResult getAllLink();\n}\n\n\n```\n\n\n\nServiceImpl\n\n```java\n@Service(\"linkService\")\npublic class LinkServiceImpl extends ServiceImpl<LinkMapper, Link> implements LinkService {\n\n    @Override\n    public ResponseResult getAllLink() {\n        //查询所有审核通过的\n        LambdaQueryWrapper<Link> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(Link::getStatus, SystemConstants.LINK_STATUS_NORMAL);\n        List<Link> links = list(queryWrapper);\n        //转换成vo\n        List<LinkVo> linkVos = BeanCopyUtils.copyBeanList(links, LinkVo.class);\n        //封装返回\n        return ResponseResult.okResult(linkVos);\n    }\n}\n\n```\n\n\n\nSystemConstants\n\n```java\n    /**\n     * 友链状态为审核通过\n     */\n    public static final String  LINK_STATUS_NORMAL = \"0\";\n```\n\n\n\n\n\n### 3.6 登录功能实现\n\n​    使用我们前台和后台的认证授权统一都使用SpringSecurity安全框架来实现。\n\n#### 3.6.0 需求\n\n​    需要实现登录功能\n\n​    有些功能必须登录后才能使用，未登录状态是不能使用的。\n\n#### 3.6.1 接口设计\n\n| 请求方式 | 请求路径   |\n| ---- | ------ |\n| POST | /login |\n\n请求体：\n\n```json\n{\n    \"userName\":\"sg\",\n    \"password\":\"1234\"\n}\n```\n\n响应格式：\n\n```json\n{\n    \"code\": 200,\n    \"data\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ODBmOThmYmJkNmI0NjM0OWUyZjY2NTM0NGNjZWY2NSIsInN1YiI6IjEiLCJpc3MiOiJzZyIsImlhdCI6MTY0Mzg3NDMxNiwiZXhwIjoxNjQzOTYwNzE2fQ.ldLBUvNIxQCGemkCoMgT_0YsjsWndTg5tqfJb77pabk\",\n        \"userInfo\": {\n            \"avatar\": \"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3bf9c263bc0f2ac5c3a7feb9e218d07475573ec8.gi\",\n            \"email\": \"23412332@qq.com\",\n            \"id\": 1,\n            \"nickName\": \"sg333\",\n            \"sex\": \"1\"\n        }\n    },\n    \"msg\": \"操作成功\"\n}\n```\n\n#### 3.6.2 表分析\n\n​    建表SQL及初始化数据见：SGBlog\\资源\\SQL\\sys_user.sql    \n\n​    顺便生成下User和UserMapper后面会用到\n\n#### 3.6.3 思路分析\n\n登录\n\n​    ①自定义登录接口  \n\n​                调用ProviderManager的方法进行认证 如果认证通过生成jwt\n\n​                把用户信息存入redis中\n\n​    ②自定义UserDetailsService \n\n​                在这个实现类中去查询数据库\n\n​    注意配置passwordEncoder为BCryptPasswordEncoder\n\n校验：\n\n​    ①定义Jwt认证过滤器\n\n​                获取token\n\n​                解析token获取其中的userid\n\n​                从redis中获取用户信息\n\n​                存入SecurityContextHolder\n\n#### 3.6.4 准备工作\n\n①添加依赖\n\n注意放开Security依赖的注释\n\n```xml\n        <!--redis依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <!--fastjson依赖-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.33</version>\n        </dependency>\n        <!--jwt依赖-->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.9.0</version>\n        </dependency>\n```\n\n②工具类和相关配置类\n\n​    见 ：SGBlog\\资源\\登录功能所需资源    \n\n#### 3.6.5 登录接口代码实现\n\n##### BlogLoginController\n\n```java\n@RestController\npublic class BlogLoginController {\n    @Autowired\n    private BlogLoginService blogLoginService;\n\n    @PostMapping(\"/login\")\n    public ResponseResult login(@RequestBody User user){\n        return blogLoginService.login(user);\n    }\n}\n\n```\n\n\n\n##### BlogLoginService\n\n```java\npublic interface BlogLoginService {\n    ResponseResult login(User user);\n}\n\n```\n\n\n\n##### SecurityConfig\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/login\").anonymous()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n\n        http.logout().disable();\n        //允许跨域\n        http.cors();\n    }\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n}\n```\n\n\n\n##### BlogLoginServiceImpl\n\n```java\n\n@Service\npublic class BlogLoginServiceImpl implements BlogLoginService {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    public ResponseResult login(User user) {\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());\n        Authentication authenticate = authenticationManager.authenticate(authenticationToken);\n        //判断是否认证通过\n        if(Objects.isNull(authenticate)){\n            throw new RuntimeException(\"用户名或密码错误\");\n        }\n        //获取userid 生成token\n        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();\n        String userId = loginUser.getUser().getId().toString();\n        String jwt = JwtUtil.createJWT(userId);\n        //把用户信息存入redis\n        redisCache.setCacheObject(\"bloglogin:\"+userId,loginUser);\n\n        //把token和userinfo封装 返回\n        //把User转换成UserInfoVo\n        UserInfoVo userInfoVo = BeanCopyUtils.copyBean(loginUser.getUser(), UserInfoVo.class);\n        BlogUserLoginVo vo = new BlogUserLoginVo(jwt,userInfoVo);\n        return ResponseResult.okResult(vo);\n    }\n}\n```\n\n\n\n##### UserDetailServiceImpl\n\n```java\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        //根据用户名查询用户信息\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUserName,username);\n        User user = userMapper.selectOne(queryWrapper);\n        //判断是否查到用户  如果没查到抛出异常\n        if(Objects.isNull(user)){\n            throw new RuntimeException(\"用户不存在\");\n        }\n        //返回用户信息\n        // TODO 查询权限信息封装\n        return new LoginUser(user);\n    }\n}\n```\n\n\n\n\n\n##### LoginUser\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class LoginUser implements UserDetails {\n\n    private User user;\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUserName();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n\n```\n\n\n\n\n\n##### BlogUserLoginVo\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BlogUserLoginVo {\n\n    private String token;\n    private UserInfoVo userInfo;\n}\n```\n\n\n\n##### UserInfoVo\n\n```java\n@Data\n@Accessors(chain = true)\npublic class UserInfoVo {\n    /**\n     * 主键\n     */\n    private Long id;\n\n    /**\n     * 昵称\n     */\n    private String nickName;\n\n    /**\n     * 头像\n     */\n    private String avatar;\n\n    private String sex;\n\n    private String email;\n\n\n}\n\n```\n\n\n\n\n\n#### 3.6.6 登录校验过滤器代码实现\n\n##### 思路\n\n​    ①定义Jwt认证过滤器\n\n​                获取token\n\n​                解析token获取其中的userid\n\n​                从redis中获取用户信息\n\n​                存入SecurityContextHolder\n\n##### JwtAuthenticationTokenFilter\n\n```java\n@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        //获取请求头中的token\n        String token = request.getHeader(\"token\");\n        if(!StringUtils.hasText(token)){\n            //说明该接口不需要登录  直接放行\n            filterChain.doFilter(request, response);\n            return;\n        }\n        //解析获取userid\n        Claims claims = null;\n        try {\n            claims = JwtUtil.parseJWT(token);\n        } catch (Exception e) {\n            e.printStackTrace();\n            //token超时  token非法\n            //响应告诉前端需要重新登录\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        String userId = claims.getSubject();\n        //从redis中获取用户信息\n        LoginUser loginUser = redisCache.getCacheObject(\"bloglogin:\" + userId);\n        //如果获取不到\n        if(Objects.isNull(loginUser)){\n            //说明登录过期  提示重新登录\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        //存入SecurityContextHolder\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(loginUser,null,null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n\n        filterChain.doFilter(request, response);\n    }\n\n\n}\n```\n\n##### SecurityConfig\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/login\").anonymous()\n                //jwt过滤器测试用，如果测试没有问题吧这里删除了\n                .antMatchers(\"/link/getAllLink\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n\n```\n\n\n\n### 3.7 认证授权失败处理\n\n​    目前我们的项目在认证出错或者权限不足的时候响应回来的Json是Security的异常处理结果。但是这个响应的格式肯定是不符合我们项目的接口规范的。所以需要自定义异常处理。\n\n\n\n​    AuthenticationEntryPoint 认证失败处理器\n\n​    AccessDeniedHandler 授权失败处理器\n\n\n\n```java\n@Component\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        authException.printStackTrace();\n        //InsufficientAuthenticationException\n        //BadCredentialsException\n        ResponseResult result = null;\n        if(authException instanceof BadCredentialsException){\n            result = ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),authException.getMessage());\n        }else if(authException instanceof InsufficientAuthenticationException){\n            result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n        }else{\n            result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),\"认证或授权失败\");\n        }\n        //响应给前端\n        WebUtils.renderString(response, JSON.toJSONString(result));\n    }\n}\n\n```\n\n\n\n```java\n@Component\npublic class AccessDeniedHandlerImpl implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {\n        accessDeniedException.printStackTrace();\n        ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);\n        //响应给前端\n        WebUtils.renderString(response, JSON.toJSONString(result));\n    }\n}\n\n```\n\n\n\n配置Security异常处理器\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n    @Autowired\n    AuthenticationEntryPoint authenticationEntryPoint;\n    @Autowired\n    AccessDeniedHandler accessDeniedHandler;\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/login\").anonymous()\n                //jwt过滤器测试用，如果测试没有问题吧这里删除了\n                .antMatchers(\"/link/getAllLink\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n\n```\n\n### 3.8 统一异常处理\n\n​    实际我们在开发过程中可能需要做很多的判断校验，如果出现了非法情况我们是期望响应对应的提示的。但是如果我们每次都自己手动去处理就会非常麻烦。我们可以选择直接抛出异常的方式，然后对异常进行统一处理。把异常中的信息封装成ResponseResult响应给前端。\n\n​    \n\nSystemException\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\npublic class SystemException extends RuntimeException{\n\n    private int code;\n\n    private String msg;\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public SystemException(AppHttpCodeEnum httpCodeEnum) {\n        super(httpCodeEnum.getMsg());\n        this.code = httpCodeEnum.getCode();\n        this.msg = httpCodeEnum.getMsg();\n    }\n\n}\n\n```\n\nGlobalExceptionHandler\n\n```java\n@RestControllerAdvice\n@Slf4j\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(SystemException.class)\n    public ResponseResult systemExceptionHandler(SystemException e){\n        //打印异常信息\n        log.error(\"出现了异常！ {}\",e);\n        //从异常对象中获取提示信息封装返回\n        return ResponseResult.errorResult(e.getCode(),e.getMsg());\n    }\n\n\n    @ExceptionHandler(Exception.class)\n    public ResponseResult exceptionHandler(Exception e){\n        //打印异常信息\n        log.error(\"出现了异常！ {}\",e);\n        //从异常对象中获取提示信息封装返回\n        return ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),e.getMessage());\n    }\n}\n\n```\n\n\n\n### 3.9 退出登录接口\n\n#### 3.9.1 接口设计\n\n| 请求方式 | 请求地址    | 请求头        |\n| ---- | ------- | ---------- |\n| POST | /logout | 需要token请求头 |\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"操作成功\"\n}\n```\n\n\n\n#### 3.9.2 代码实现\n\n要实现的操作：\n\n​    删除redis中的用户信息\n\nBlogLoginController\n\n```java\n    @PostMapping(\"/logout\")\n    public ResponseResult logout(){\n        return blogLoginService.logout();\n    }\n```\n\nBlogLoginService\n\n```java\nResponseResult logout();\n```\n\nBlogLoginServiceImpl\n\n```java\n    @Override\n    public ResponseResult logout() {\n        //获取token 解析获取userid\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        LoginUser loginUser = (LoginUser) authentication.getPrincipal();\n        //获取userid\n        Long userId = loginUser.getUser().getId();\n        //删除redis中的用户信息\n        redisCache.deleteObject(\"bloglogin:\"+userId);\n        return ResponseResult.okResult();\n    }\n```\n\nSecurityConfig\n\n要关闭默认的退出登录功能。并且要配置我们的退出登录接口需要认证才能访问\n\n```java\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/login\").anonymous()\n                //注销接口需要认证才能访问\n                .antMatchers(\"/logout\").authenticated()\n                //jwt过滤器测试用，如果测试没有问题吧这里删除了\n                .antMatchers(\"/link/getAllLink\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n        //关闭默认的注销功能\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n```\n\n\n\n### 3.10 查询评论列表接口\n\n#### 3.10.1 需求\n\n​    文章详情页面要展示这篇文章下的评论列表。\n\n​    效果如下:\n\n![image-20220208214106296](img/image-20220208214106296.png)\n\n\n\n\n\n#### 3.10.2 评论表分析\n\n​    通过需求去分析需要有哪些字段。\n\n​    建表SQL及初始化数据见：SGBlog\\资源\\SQL\\sg_comment.sql    \n\n​    **顺便生成下对应的代码**\n\n#### 3.10.3 接口设计\n\n| 请求方式 | 请求地址                 | 请求头         |\n| ---- | -------------------- | ----------- |\n| GET  | /comment/commentList | 不需要token请求头 |\n\nQuery格式请求参数：\n\narticleId:文章id\n\npageNum: 页码\n\npageSize: 每页条数\n\n\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"data\": {\n        \"rows\": [\n            {\n                \"articleId\": \"1\",\n                \"children\": [\n                    {\n                        \"articleId\": \"1\",\n                        \"content\": \"你说啥？\",\n                        \"createBy\": \"1\",\n                        \"createTime\": \"2022-01-30 10:06:21\",\n                        \"id\": \"20\",\n                        \"rootId\": \"1\",\n                        \"toCommentId\": \"1\",\n                        \"toCommentUserId\": \"1\",\n                        \"toCommentUserName\": \"sg333\",\n                        \"username\": \"sg333\"\n                    }\n                ],\n                \"content\": \"asS\",\n                \"createBy\": \"1\",\n                \"createTime\": \"2022-01-29 07:59:22\",\n                \"id\": \"1\",\n                \"rootId\": \"-1\",\n                \"toCommentId\": \"-1\",\n                \"toCommentUserId\": \"-1\",\n                \"username\": \"sg333\"\n            }\n        ],\n        \"total\": \"15\"\n    },\n    \"msg\": \"操作成功\"\n}\n```\n\n\n\n#### 3.10.4 代码实现\n\n##### 3.10.4.1 不考虑子评论\n\nCommentController\n\n```java\n@RestController\n@RequestMapping(\"/comment\")\npublic class CommentController {\n\n    @Autowired\n    private CommentService commentService;\n\n    @GetMapping(\"/commentList\")\n    public ResponseResult commentList(Long articleId,Integer pageNum,Integer pageSize){\n        return commentService.commentList(articleId,pageNum,pageSize);\n    }\n}\n\n```\n\n\n\nCommentService\n\n```java\npublic interface CommentService extends IService<Comment> {\n\n    ResponseResult commentList(Long articleId, Integer pageNum, Integer pageSize);\n}\n\n```\n\n\n\nCommentServiceImpl\n\n```java\n@Service(\"commentService\")\npublic class CommentServiceImpl extends ServiceImpl<CommentMapper, Comment> implements CommentService {\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    public ResponseResult commentList(Long articleId, Integer pageNum, Integer pageSize) {\n        //查询对应文章的根评论\n        LambdaQueryWrapper<Comment> queryWrapper = new LambdaQueryWrapper<>();\n        //对articleId进行判断\n        queryWrapper.eq(Comment::getArticleId,articleId);\n        //根评论 rootId为-1\n        queryWrapper.eq(Comment::getRootId,-1);\n\n        //分页查询\n        Page<Comment> page = new Page(pageNum,pageSize);\n        page(page,queryWrapper);\n\n        List<CommentVo> commentVoList = toCommentVoList(page.getRecords());\n\n        return ResponseResult.okResult(new PageVo(commentVoList,page.getTotal()));\n    }\n\n    private List<CommentVo> toCommentVoList(List<Comment> list){\n        List<CommentVo> commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);\n        //遍历vo集合\n        for (CommentVo commentVo : commentVos) {\n            //通过creatyBy查询用户的昵称并赋值\n            String nickName = userService.getById(commentVo.getCreateBy()).getNickName();\n            commentVo.setUsername(nickName);\n            //通过toCommentUserId查询用户的昵称并赋值\n            //如果toCommentUserId不为-1才进行查询\n            if(commentVo.getToCommentUserId()!=-1){\n                String toCommentUserName = userService.getById(commentVo.getToCommentUserId()).getNickName();\n                commentVo.setToCommentUserName(toCommentUserName);\n            }\n        }\n        return commentVos;\n    }\n}\n\n\n```\n\n\n\nCommentVo\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CommentVo {\n    private Long id;\n    //文章id\n    private Long articleId;\n    //根评论id\n    private Long rootId;\n    //评论内容\n    private String content;\n    //所回复的目标评论的userid\n    private Long toCommentUserId;\n    private String toCommentUserName;\n    //回复目标评论id\n    private Long toCommentId;\n\n    private Long createBy;\n\n    private Date createTime;\n\n    private String username;\n}\n\n```\n\n\n\n##### 3.10.4.2 查询子评论\n\nCommentVo在之前的基础上增加了  private List<CommentVo> children;\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CommentVo {\n    private Long id;\n    //文章id\n    private Long articleId;\n    //根评论id\n    private Long rootId;\n    //评论内容\n    private String content;\n    //所回复的目标评论的userid\n    private Long toCommentUserId;\n    private String toCommentUserName;\n    //回复目标评论id\n    private Long toCommentId;\n\n    private Long createBy;\n\n    private Date createTime;\n\n    private String username;\n\n    private List<CommentVo> children;\n}\n\n```\n\n\n\nCommentServiceImpl\n\n```java\n@Service(\"commentService\")\npublic class CommentServiceImpl extends ServiceImpl<CommentMapper, Comment> implements CommentService {\n\n    @Autowired\n    private UserService userService;\n\n    @Override\n    public ResponseResult commentList(Long articleId, Integer pageNum, Integer pageSize) {\n        //查询对应文章的根评论\n        LambdaQueryWrapper<Comment> queryWrapper = new LambdaQueryWrapper<>();\n        //对articleId进行判断\n        queryWrapper.eq(Comment::getArticleId,articleId);\n        //根评论 rootId为-1\n        queryWrapper.eq(Comment::getRootId,-1);\n\n        //分页查询\n        Page<Comment> page = new Page(pageNum,pageSize);\n        page(page,queryWrapper);\n\n        List<CommentVo> commentVoList = toCommentVoList(page.getRecords());\n\n        //查询所有根评论对应的子评论集合，并且赋值给对应的属性\n        for (CommentVo commentVo : commentVoList) {\n            //查询对应的子评论\n            List<CommentVo> children = getChildren(commentVo.getId());\n            //赋值\n            commentVo.setChildren(children);\n        }\n\n        return ResponseResult.okResult(new PageVo(commentVoList,page.getTotal()));\n    }\n\n    /**\n     * 根据根评论的id查询所对应的子评论的集合\n     * @param id 根评论的id\n     * @return\n     */\n    private List<CommentVo> getChildren(Long id) {\n\n        LambdaQueryWrapper<Comment> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(Comment::getRootId,id);\n        queryWrapper.orderByAsc(Comment::getCreateTime);\n        List<Comment> comments = list(queryWrapper);\n\n        List<CommentVo> commentVos = toCommentVoList(comments);\n        return commentVos;\n    }\n\n    private List<CommentVo> toCommentVoList(List<Comment> list){\n        List<CommentVo> commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);\n        //遍历vo集合\n        for (CommentVo commentVo : commentVos) {\n            //通过creatyBy查询用户的昵称并赋值\n            String nickName = userService.getById(commentVo.getCreateBy()).getNickName();\n            commentVo.setUsername(nickName);\n            //通过toCommentUserId查询用户的昵称并赋值\n            //如果toCommentUserId不为-1才进行查询\n            if(commentVo.getToCommentUserId()!=-1){\n                String toCommentUserName = userService.getById(commentVo.getToCommentUserId()).getNickName();\n                commentVo.setToCommentUserName(toCommentUserName);\n            }\n        }\n        return commentVos;\n    }\n}\n```\n\n\n\n\n\n### 3.11 发表评论接口\n\n#### 3.11.1 需求\n\n​    用户登录后可以对文章发表评论，也可以对评论进行回复。\n\n​    用户登录后也可以在友链页面进行评论。\n\n#### 3.11.2 接口设计\n\n| 请求方式 | 请求地址     | 请求头      |\n| ---- | -------- | -------- |\n| POST | /comment | 需要token头 |\n\n##### 请求体：\n\n回复了文章：\n\n```json\n{\"articleId\":1,\"type\":0,\"rootId\":-1,\"toCommentId\":-1,\"toCommentUserId\":-1,\"content\":\"评论了文章\"}\n```\n\n回复了某条评论：\n\n```json\n{\"articleId\":1,\"type\":0,\"rootId\":\"3\",\"toCommentId\":\"3\",\"toCommentUserId\":\"1\",\"content\":\"回复了某条评论\"}\n```\n\n\n\n如果是友链评论，type应该为1\n\n\n\n##### 响应格式：\n\n```java\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n#### 3.11.3 代码实现\n\nCommentController\n\n```java\n    @PostMapping\n    public ResponseResult addComment(@RequestBody Comment comment){\n        return commentService.addComment(comment);\n    }\n```\n\nCommentService\n\n```java\nResponseResult addComment(Comment comment);\n```\n\nCommentServiceImpl\n\n```java\n    @Override\n    public ResponseResult addComment(Comment comment) {\n        //评论内容不能为空\n        if(!StringUtils.hasText(comment.getContent())){\n            throw new SystemException(AppHttpCodeEnum.CONTENT_NOT_NULL);\n        }\n        save(comment);\n        return ResponseResult.okResult();\n    }\n```\n\n\n\nSecurityUtils\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\npublic class SecurityUtils\n{\n\n    /**\n     * 获取用户\n     **/\n    public static LoginUser getLoginUser()\n    {\n        return (LoginUser) getAuthentication().getPrincipal();\n    }\n\n    /**\n     * 获取Authentication\n     */\n    public static Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }\n\n    public static Boolean isAdmin(){\n        Long id = getLoginUser().getUser().getId();\n        return id != null && 1L == id;\n    }\n\n    public static Long getUserId() {\n        return getLoginUser().getUser().getId();\n    }\n}\n```\n\n配置MP字段自动填充\n\n```java\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        Long userId = null;\n        try {\n            userId = SecurityUtils.getUserId();\n        } catch (Exception e) {\n            e.printStackTrace();\n            userId = -1L;//表示是自己创建\n        }\n        this.setFieldValByName(\"createTime\", new Date(), metaObject);\n        this.setFieldValByName(\"createBy\",userId , metaObject);\n        this.setFieldValByName(\"updateTime\", new Date(), metaObject);\n        this.setFieldValByName(\"updateBy\", userId, metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.setFieldValByName(\"updateTime\", new Date(), metaObject);\n        this.setFieldValByName(\" \", SecurityUtils.getUserId(), metaObject);\n    }\n}\n```\n\n用注解标识哪些字段在什么情况下需要自动填充\n\n```java\n    /**\n     * 创建人的用户id\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Long createBy;\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Date createTime;\n    /**\n     * 更新人\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updateBy;\n    /**\n     * 更新时间\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Date updateTime;\n```\n\n\n\n\n\n### 3.12 友联评论列表\n\n#### 3.12.1 需求\n\n​    友链页面也需要查询对应的评论列表。\n\n\n\n#### 3.12.2 接口设计\n\n\n\n| 请求方式 | 请求地址                     | 请求头         |\n| ---- | ------------------------ | ----------- |\n| GET  | /comment/linkCommentList | 不需要token请求头 |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"data\": {\n        \"rows\": [\n            {\n                \"articleId\": \"1\",\n                \"children\": [\n                    {\n                        \"articleId\": \"1\",\n                        \"content\": \"回复友链评论3\",\n                        \"createBy\": \"1\",\n                        \"createTime\": \"2022-01-30 10:08:50\",\n                        \"id\": \"23\",\n                        \"rootId\": \"22\",\n                        \"toCommentId\": \"22\",\n                        \"toCommentUserId\": \"1\",\n                        \"toCommentUserName\": \"sg333\",\n                        \"username\": \"sg333\"\n                    }\n                ],\n                \"content\": \"友链评论2\",\n                \"createBy\": \"1\",\n                \"createTime\": \"2022-01-30 10:08:28\",\n                \"id\": \"22\",\n                \"rootId\": \"-1\",\n                \"toCommentId\": \"-1\",\n                \"toCommentUserId\": \"-1\",\n                \"username\": \"sg333\"\n            }\n        ],\n        \"total\": \"1\"\n    },\n    \"msg\": \"操作成功\"\n}\n```\n\n\n\n\n\n#### 3.12.3 代码实现\n\nCommentController 修改了之前的文章评论列表接口，并且增加了新的友联评论接口\n\n```java\n    @GetMapping(\"/commentList\")\n    public ResponseResult commentList(Long articleId,Integer pageNum,Integer pageSize){\n        return commentService.commentList(SystemConstants.ARTICLE_COMMENT,articleId,pageNum,pageSize);\n    }   \n    @GetMapping(\"/linkCommentList\")\n    public ResponseResult linkCommentList(Integer pageNum,Integer pageSize){\n        return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);\n    }\n```\n\n\n\nSystemConstants增加了两个常量\n\n```java\n    /**\n     * 评论类型为：文章评论\n     */\n    public static final String ARTICLE_COMMENT = \"0\";\n    /**\n     * 评论类型为：友联评论\n     */\n    public static final String LINK_COMMENT = \"1\";\n```\n\n\n\n\n\nCommentService修改了commentList方法，增加了一个参数commentType\n\n```java\nResponseResult commentList(String commentType, Long articleId, Integer pageNum, Integer pageSize);\n```\n\n\n\nCommentServiceImpl修改commentList方法的代码，必须commentType为0的时候才增加articleId的判断，并且增加了一个评论类型的添加。\n\n```java\n    @Override\n    public ResponseResult commentList(String commentType, Long articleId, Integer pageNum, Integer pageSize) {\n        //查询对应文章的根评论\n        LambdaQueryWrapper<Comment> queryWrapper = new LambdaQueryWrapper<>();\n        //对articleId进行判断\n        queryWrapper.eq(SystemConstants.ARTICLE_COMMENT.equals(commentType),Comment::getArticleId,articleId);\n        //根评论 rootId为-1\n        queryWrapper.eq(Comment::getRootId,-1);\n\n        //评论类型\n        queryWrapper.eq(Comment::getType,commentType);\n\n        //分页查询\n        Page<Comment> page = new Page(pageNum,pageSize);\n        page(page,queryWrapper);\n\n        List<CommentVo> commentVoList = toCommentVoList(page.getRecords());\n\n        //查询所有根评论对应的子评论集合，并且赋值给对应的属性\n        for (CommentVo commentVo : commentVoList) {\n            //查询对应的子评论\n            List<CommentVo> children = getChildren(commentVo.getId());\n            //赋值\n            commentVo.setChildren(children);\n        }\n\n        return ResponseResult.okResult(new PageVo(commentVoList,page.getTotal()));\n    }\n```\n\n\n\n\n\n### 3.13 个人信息查询接口\n\n#### 3.13.1 需求\n\n​    进入个人中心的时候需要能够查看当前用户信息\n\n#### 3.13.2 接口设计\n\n\n\n| 请求方式 | 请求地址           | 请求头        |\n| ---- | -------------- | ---------- |\n| GET  | /user/userInfo | 需要token请求头 |\n\n不需要参数\n\n响应格式:\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"avatar\":\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3bf9c263bc0f2ac5c3a7feb9e218d07475573ec8.gi\",\n        \"email\":\"23412332@qq.com\",\n        \"id\":\"1\",\n        \"nickName\":\"sg333\",\n        \"sex\":\"1\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 3.13.3 代码实现\n\n\n\nUserController\n\n```java\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/userInfo\")\n    public ResponseResult userInfo(){\n        return userService.userInfo();\n    }\n}\n\n```\n\n\n\nUserService增加方法定义\n\n```java\npublic interface UserService extends IService<User> {\n\n    ResponseResult userInfo();\n\n}\n\n```\n\n\n\nUserServiceImpl实现userInfo方法\n\n```java\n    @Override\n    public ResponseResult userInfo() {\n        //获取当前用户id\n        Long userId = SecurityUtils.getUserId();\n        //根据用户id查询用户信息\n        User user = getById(userId);\n        //封装成UserInfoVo\n        UserInfoVo vo = BeanCopyUtils.copyBean(user,UserInfoVo.class);\n        return ResponseResult.okResult(vo);\n    }\n```\n\n\n\nSecurityConfig配置该接口必须认证后才能访问\n\n```java\n   @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/login\").anonymous()\n                //注销接口需要认证才能访问\n                .antMatchers(\"/logout\").authenticated()\n                //个人信息接口必须登录后才能访问\n                .antMatchers(\"/user/userInfo\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n        //关闭默认的注销功能\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n```\n\n\n\n### 3.14 头像上传接口\n\n#### 3.14.1 需求\n\n​    在个人中心点击编辑的时候可以上传头像图片。上传完头像后，可以用于更新个人信息接口。\n\n\n\n#### 3.14.2 OSS\n\n##### 3.14.2.1 为什么要使用OSS\n\n​    因为如果把图片视频等文件上传到自己的应用的Web服务器，在读取图片的时候会占用比较多的资源。影响应用服务器的性能。\n\n​    所以我们一般使用OSS(Object Storage Service对象存储服务)存储图片或视频。\n\n\n\n##### 3.14.2.2 七牛云基本使用测试\n\n![image-20220227224537701](img/image-20220227224537701.png)\n\n![image-20220227224443813](img/image-20220227224443813.png)\n\n\n\n秘钥\n\n![image-20220228230512598](img/image-20220228230512598.png)\n\n![image-20220228230933808](img/image-20220228230933808.png)\n\n\n\n##### 3.14.2.3 七牛云测试代码编写\n\n①添加依赖\n\n```xml\n        <dependency>\n            <groupId>com.qiniu</groupId>\n            <artifactId>qiniu-java-sdk</artifactId>\n            <version>[7.7.0, 7.7.99]</version>\n        </dependency>\n```\n\n\n\n②复制修改案例代码\n\napplication.yml\n\n```yml\noss:\n  accessKey: xxxx\n  secretKey: xxxx\n  bucket: sg-blog\n```\n\nOSSTest.java\n\n```java\n@SpringBootTest\n@ConfigurationProperties(prefix = \"oss\")\npublic class OSSTest {\n\n    private String accessKey;\n    private String secretKey;\n    private String bucket;\n\n    public void setAccessKey(String accessKey) {\n        this.accessKey = accessKey;\n    }\n\n    public void setSecretKey(String secretKey) {\n        this.secretKey = secretKey;\n    }\n\n    public void setBucket(String bucket) {\n        this.bucket = bucket;\n    }\n\n    @Test\n    public void testOss(){\n        //构造一个带指定 Region 对象的配置类\n        Configuration cfg = new Configuration(Region.autoRegion());\n        //...其他参数参考类注释\n\n        UploadManager uploadManager = new UploadManager(cfg);\n        //...生成上传凭证，然后准备上传\n//        String accessKey = \"your access key\";\n//        String secretKey = \"your secret key\";\n//        String bucket = \"sg-blog\";\n\n        //默认不指定key的情况下，以文件内容的hash值作为文件名\n        String key = \"2022/sg.png\";\n\n        try {\n//            byte[] uploadBytes = \"hello qiniu cloud\".getBytes(\"utf-8\");\n//            ByteArrayInputStream byteInputStream=new ByteArrayInputStream(uploadBytes);\n\n\n            InputStream inputStream = new FileInputStream(\"C:\\\\Users\\\\root\\\\Desktop\\\\Snipaste_2022-02-28_22-48-37.png\");\n            Auth auth = Auth.create(accessKey, secretKey);\n            String upToken = auth.uploadToken(bucket);\n\n            try {\n                Response response = uploadManager.put(inputStream,key,upToken,null, null);\n                //解析上传成功的结果\n                DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);\n                System.out.println(putRet.key);\n                System.out.println(putRet.hash);\n            } catch (QiniuException ex) {\n                Response r = ex.response;\n                System.err.println(r.toString());\n                try {\n                    System.err.println(r.bodyString());\n                } catch (QiniuException ex2) {\n                    //ignore\n                }\n            }\n        } catch (Exception ex) {\n            //ignore\n        }\n\n    }\n}\n```\n\n\n\n#### 3.14.2 接口设计\n\n| 请求方式 | 请求地址    | 请求头     |\n| ---- | ------- | ------- |\n| POST | /upload | 需要token |\n\n参数：\n\n​    img,值为要上传的文件\n\n请求头：\n\n​    Content-Type ：multipart/form-data;\n\n\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"data\": \"文件访问链接\",\n    \"msg\": \"操作成功\"\n}\n```\n\n#### 3.14.3 代码实现\n\n```java\n@RestController\npublic class UploadController {\n    @Autowired\n    private UploadService uploadService;\n\n    @PostMapping(\"/upload\")\n    public ResponseResult uploadImg(MultipartFile img){\n        return uploadService.uploadImg(img);\n    }\n}\n\n```\n\n```java\npublic interface UploadService {\n    ResponseResult uploadImg(MultipartFile img);\n}\n\n```\n\n\n\n```java\n@Service\n@Data\n@ConfigurationProperties(prefix = \"oss\")\npublic class OssUploadService implements UploadService {\n    @Override\n    public ResponseResult uploadImg(MultipartFile img) {\n        //判断文件类型\n        //获取原始文件名\n        String originalFilename = img.getOriginalFilename();\n        //对原始文件名进行判断\n        if(!originalFilename.endsWith(\".png\")){\n            throw new SystemException(AppHttpCodeEnum.FILE_TYPE_ERROR);\n        }\n\n        //如果判断通过上传文件到OSS\n        String filePath = PathUtils.generateFilePath(originalFilename);\n        String url = uploadOss(img,filePath);//  2099/2/3/wqeqeqe.png\n        return ResponseResult.okResult(url);\n    }\n\n    private String accessKey;\n    private String secretKey;\n    private String bucket;\n\n\n    private String uploadOss(MultipartFile imgFile, String filePath){\n        //构造一个带指定 Region 对象的配置类\n        Configuration cfg = new Configuration(Region.autoRegion());\n        //...其他参数参考类注释\n        UploadManager uploadManager = new UploadManager(cfg);\n        //默认不指定key的情况下，以文件内容的hash值作为文件名\n        String key = filePath;\n        try {\n            InputStream inputStream = imgFile.getInputStream();\n            Auth auth = Auth.create(accessKey, secretKey);\n            String upToken = auth.uploadToken(bucket);\n            try {\n                Response response = uploadManager.put(inputStream,key,upToken,null, null);\n                //解析上传成功的结果\n                DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);\n                System.out.println(putRet.key);\n                System.out.println(putRet.hash);\n                return \"http://r7yxkqloa.bkt.clouddn.com/\"+key;\n            } catch (QiniuException ex) {\n                Response r = ex.response;\n                System.err.println(r.toString());\n                try {\n                    System.err.println(r.bodyString());\n                } catch (QiniuException ex2) {\n                    //ignore\n                }\n            }\n        } catch (Exception ex) {\n            //ignore\n        }\n        return \"www\";\n    }\n}\n\n```\n\n\n\nPathUtils\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\npublic class PathUtils {\n\n    public static String generateFilePath(String fileName){\n        //根据日期生成路径   2022/1/15/\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd/\");\n        String datePath = sdf.format(new Date());\n        //uuid作为文件名\n        String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n        //后缀和文件后缀一致\n        int index = fileName.lastIndexOf(\".\");\n        // test.jpg -> .jpg\n        String fileType = fileName.substring(index);\n        return new StringBuilder().append(datePath).append(uuid).append(fileType).toString();\n    }\n}\n\n```\n\n\n\n### 3.15 更新个人信息接口\n\n#### 3.15.1 需求\n\n​    在编辑完个人资料后点击保存会对个人资料进行更新。\n\n#### 3.15.2 接口设计\n\n​     \n\n| 请求方式 | 请求地址           | 请求头        |\n| ---- | -------------- | ---------- |\n| PUT  | /user/userInfo | 需要token请求头 |\n\n参数\n\n请求体中json格式数据：\n\n```json\n{\n    \"avatar\":\"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/948597e164614902ab1662ba8452e106.png\",\n    \"email\":\"23412332@qq.com\",\n    \"id\":\"1\",\n    \"nickName\":\"sg333\",\n    \"sex\":\"1\"\n}\n```\n\n\n\n\n\n响应格式:\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 3.15.3 代码实现\n\nUserController\n\n```java\n    @PutMapping(\"/userInfo\")\n    public ResponseResult updateUserInfo(@RequestBody User user){\n        return userService.updateUserInfo(user);\n    }\n```\n\nUserService\n\n```java\nResponseResult updateUserInfo(User user);\n```\n\n\n\nUserServiceImpl\n\n```java\n    @Override\n    public ResponseResult updateUserInfo(User user) {\n        updateById(user);\n        return ResponseResult.okResult();\n    }\n```\n\n### 3.16 用户注册\n\n#### 3.16.1 需求\n\n​    要求用户能够在注册界面完成用户的注册。要求用户名，昵称，邮箱不能和数据库中原有的数据重复。如果某项重复了注册失败并且要有对应的提示。并且要求用户名，密码，昵称，邮箱都不能为空。\n\n​    注意:密码必须密文存储到数据库中。\n\n#### 3.16.2 接口设计\n\n​     \n\n| 请求方式 | 请求地址           | 请求头         |\n| ---- | -------------- | ----------- |\n| POST | /user/register | 不需要token请求头 |\n\n参数\n\n请求体中json格式数据：\n\n```json\n{\n  \"email\": \"string\",\n  \"nickName\": \"string\",\n  \"password\": \"string\",\n  \"userName\": \"string\"\n}\n```\n\n响应格式:\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n#### 3.16.3 代码实现\n\nUserController\n\n```java\n    @PostMapping(\"/register\")\n    public ResponseResult register(@RequestBody User user){\n        return userService.register(user);\n    }\n```\n\nUserService\n\n```java\nResponseResult register(User user);\n```\n\nUserServiceImpl\n\n```java\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n    @Override\n    public ResponseResult register(User user) {\n        //对数据进行非空判断\n        if(!StringUtils.hasText(user.getUserName())){\n            throw new SystemException(AppHttpCodeEnum.USERNAME_NOT_NULL);\n        }\n        if(!StringUtils.hasText(user.getPassword())){\n            throw new SystemException(AppHttpCodeEnum.PASSWORD_NOT_NULL);\n        }\n        if(!StringUtils.hasText(user.getEmail())){\n            throw new SystemException(AppHttpCodeEnum.EMAIL_NOT_NULL);\n        }\n        if(!StringUtils.hasText(user.getNickName())){\n            throw new SystemException(AppHttpCodeEnum.NICKNAME_NOT_NULL);\n        }\n        //对数据进行是否存在的判断\n        if(userNameExist(user.getUserName())){\n            throw new SystemException(AppHttpCodeEnum.USERNAME_EXIST);\n        }\n        if(nickNameExist(user.getNickName())){\n            throw new SystemException(AppHttpCodeEnum.NICKNAME_EXIST);\n        }\n        //...\n        //对密码进行加密\n        String encodePassword = passwordEncoder.encode(user.getPassword());\n        user.setPassword(encodePassword);\n        //存入数据库\n        save(user);\n        return ResponseResult.okResult();\n    }\n\n```\n\n```java\npublic enum AppHttpCodeEnum {\n    // 成功\n    SUCCESS(200,\"操作成功\"),\n    // 登录\n    NEED_LOGIN(401,\"需要登录后操作\"),\n    NO_OPERATOR_AUTH(403,\"无权限操作\"),\n    SYSTEM_ERROR(500,\"出现错误\"),\n    USERNAME_EXIST(501,\"用户名已存在\"),\n     PHONENUMBER_EXIST(502,\"手机号已存在\"), EMAIL_EXIST(503, \"邮箱已存在\"),\n    REQUIRE_USERNAME(504, \"必需填写用户名\"),\n    CONTENT_NOT_NULL(506, \"评论内容不能为空\"),\n    FILE_TYPE_ERROR(507, \"文件类型错误，请上传png文件\"),\n    USERNAME_NOT_NULL(508, \"用户名不能为空\"),\n    NICKNAME_NOT_NULL(509, \"昵称不能为空\"),\n    PASSWORD_NOT_NULL(510, \"密码不能为空\"),\n    EMAIL_NOT_NULL(511, \"邮箱不能为空\"),\n    NICKNAME_EXIST(512, \"昵称已存在\"),\n    LOGIN_ERROR(505,\"用户名或密码错误\");\n    int code;\n    String msg;\n\n    AppHttpCodeEnum(int code, String errorMessage){\n        this.code = code;\n        this.msg = errorMessage;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n\n```\n\n\n\n\n\n\n\n### 3.17 AOP实现日志记录\n\n#### 3.17.1 需求\n\n​    需要通过日志记录接口调用信息。便于后期调试排查。并且可能有很多接口都需要进行日志的记录。\n\n​    接口被调用时日志打印格式如下：\n\n![image-20220313133714102](img/image-20220313133714102.png)\n\n\n\n#### 3.17.2 思路分析\n\n​    相当于是对原有的功能进行增强。并且是批量的增强，这个时候就非常适合用AOP来进行实现。\n\n​    \n\n#### 3.17.3 代码实现\n\n日志打印格式\n\n```java\n        log.info(\"=======Start=======\");\n        // 打印请求 URL\n        log.info(\"URL            : {}\",);\n        // 打印描述信息\n        log.info(\"BusinessName   : {}\", );\n        // 打印 Http method\n        log.info(\"HTTP Method    : {}\", );\n        // 打印调用 controller 的全路径以及执行方法\n        log.info(\"Class Method   : {}.{}\", );\n        // 打印请求的 IP\n        log.info(\"IP             : {}\",);\n        // 打印请求入参\n        log.info(\"Request Args   : {}\",);\n        // 打印出参\n        log.info(\"Response       : {}\", );\n        // 结束后换行\n        log.info(\"=======End=======\" + System.lineSeparator());\n```\n\n\n\n\n\n\n\n### 3.18 更新浏览次数\n\n#### 3.18.1 需求\n\n​    在用户浏览博文时要实现对应博客浏览量的增加。\n\n#### 3.18.2 思路分析\n\n​    我们只需要在每次用户浏览博客时更新对应的浏览数即可。\n\n​    但是如果直接操作博客表的浏览量的话，在并发量大的情况下会出现什么问题呢？\n\n​    如何去优化呢？\n\n​    \n\n①在应用启动时把博客的浏览量存储到redis中\n\n②更新浏览量时去更新redis中的数据\n\n③每隔10分钟把Redis中的浏览量更新到数据库中\n\n④读取文章浏览量时从redis读取\n\n\n\n#### 3.18.3 铺垫知识\n\n##### 3.18.3.1 CommandLineRunner实现项目启动时预处理\n\n​    如果希望在SpringBoot应用启动时进行一些初始化操作可以选择使用CommandLineRunner来进行处理。\n\n​    我们只需要实现CommandLineRunner接口，并且把对应的bean注入容器。把相关初始化的代码重新到需要重新的方法中。\n\n​    这样就会在应用启动的时候执行对应的代码。\n\n```java\n@Component\npublic class TestRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"程序初始化\");\n    }\n}\n\n```\n\n\n\n##### 3.18.3.2 定时任务\n\n​    定时任务的实现方式有很多，比如XXL-Job等。但是其实核心功能和概念都是类似的，很多情况下只是调用的API不同而已。\n\n​    这里就先用SpringBoot为我们提供的定时任务的API来实现一个简单的定时任务，让大家先对定时任务里面的一些核心概念有个大致的了解。\n\n实现步骤\n\n① 使用@EnableScheduling注解开启定时任务功能\n\n​    我们可以在配置类上加上@EnableScheduling\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.sangeng.mapper\")\n@EnableScheduling\npublic class SanGengBlogApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SanGengBlogApplication.class,args);\n    }\n}\n```\n\n② 确定定时任务执行代码，并配置任务执行时间\n\n​    使用@Scheduled注解标识需要定时执行的代码。注解的cron属性相当于是任务的执行时间。目前可以使用 0/5 * * * * ? 进行测试，代表从0秒开始，每隔5秒执行一次。 \n\n​    注意：对应的bean要注入容器，否则不会生效。\n\n```java\n@Component\npublic class TestJob {\n\n    @Scheduled(cron = \"0/5 * * * * ?\")\n    public void testJob(){\n        //要执行的代码\n        System.out.println(\"定时任务执行了\");\n    }\n}\n\n```\n\n\n\n###### 3.18.3.2.1 cron 表达式语法\n\n​    cron表达式是用来设置定时任务执行时间的表达式。\n\n​    很多情况下我们可以用 ： [在线Cron表达式生成器](https://www.bejson.com/othertools/cron/) 来帮助我们理解cron表达式和书写cron表达式。\n\n​    但是我们还是有需要学习对应的Cron语法的，这样可以更有利于我们书写Cron表达式。\n\n\n\n如上我们用到的 0/5 * * * * ? *，cron表达式由七部分组成，中间由空格分隔，这七部分从左往右依次是：\n\n秒（0~59），分钟（0~59），小时（0~23），日期（1-月最后一天），月份（1-12），星期几（1-7,1表示星期日），年份（一般该项不设置，直接忽略掉，即可为空值）\n\n\n\n通用特殊字符：, - * /  (可以在任意部分使用)\n\n> *\n\n星号表示任意值，例如：\n\n```\n* * * * * ?\n```\n\n表示 “ 每年每月每天每时每分每秒 ” 。\n\n\n\n> ,   \n\n可以用来定义列表，例如 ：  \n\n```\n1,2,3 * * * * ?\n```\n\n表示 “ 每年每月每天每时每分的每个第1秒，第2秒，第3秒 ” 。\n\n\n\n> -\n\n定义范围，例如：\n\n```\n1-3 * * * * ?\n```\n\n表示 “ 每年每月每天每时每分的第1秒至第3秒 ”。\n\n\n\n> /\n\n每隔多少，例如\n\n```\n5/10 * * * * ?\n```\n\n表示 “ 每年每月每天每时每分，从第5秒开始，每10秒一次 ” 。即 “ / ” 的左侧是开始值，右侧是间隔。如果是从 “ 0 ” 开始的话，也可以简写成 “ /10 ” \n\n\n\n\n\n\n\n\n\n日期部分还可允许特殊字符： ? L W\n\n星期部分还可允许的特殊字符: ? L # \n\n\n\n> ?\n\n只可用在日期和星期部分。表示没有具体的值，使用?要注意冲突。日期和星期两个部分如果其中一个部分设置了值，则另一个必须设置为 “ ? ”。\n\n例如：\n\n```\n0\\* * * 2 * ?\n 和\n0\\* * * ? * 2\n```\n\n同时使用?和同时不使用?都是不对的\n\n例如下面写法就是错的\n\n```\n* * * 2 * 2\n 和\n* * * ? * ?\n\n```\n\n\n\n\n\n> W\n\n只能用在日期中，表示当月中最接近某天的工作日\n\n```\n0 0 0 31W * ?\n```\n\n表示最接近31号的工作日，如果31号是星期六，则表示30号，即星期五，如果31号是星期天，则表示29号，即星期五。如果31号是星期三，则表示31号本身，即星期三。\n\n\n\n\n\n\n\n\n\n> L\n\n表示最后（Last）,只能用在日期和星期中\n\n\n\n在日期中表示每月最后一天，在一月份中表示31号，在六月份中表示30号\n\n也可以表示每月倒是第N天。例如： L-2表示每个月的倒数第2天\n\n\n\n 0 0 0 LW * ?\n LW可以连起来用，表示每月最后一个工作日，即每月最后一个星期五\n\n\n\n在星期中表示7即星期六\n\n```\n0 0 0 ? * L\n表示每个星期六\n0 0 0 ? * 6L\n若前面有其他值的话，则表示最后一个星期几，即每月的最后一个星期五\n```\n\n\n\n\n\n> # \n\n只能用在星期中，表示第几个星期几\n\n```\n0 0 0 ? * 6#3\n表示每个月的第三个星期五。\n```\n\n\n\n\n\n\n\n#### 3.18.4 接口设计\n\n​     \n\n| 请求方式 | 请求地址                          | 请求头         |\n| ---- | ----------------------------- | ----------- |\n| PUT  | /article/updateViewCount/{id} | 不需要token请求头 |\n\n参数\n\n​    请求路径中携带文章id\n\n响应格式:\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 3.18.5 代码实现\n\n##### ①在应用启动时把博客的浏览量存储到redis中\n\n​    实现CommandLineRunner接口，在应用启动时初始化缓存。\n\n```java\n@Component\npublic class ViewCountRunner implements CommandLineRunner {\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    public void run(String... args) throws Exception {\n        //查询博客信息  id  viewCount\n        List<Article> articles = articleMapper.selectList(null);\n        Map<String, Integer> viewCountMap = articles.stream()\n                .collect(Collectors.toMap(article -> article.getId().toString(), article -> {\n                    return article.getViewCount().intValue();//\n                }));\n        //存储到redis中\n        redisCache.setCacheMap(\"article:viewCount\",viewCountMap);\n    }\n}\n\n```\n\n\n\n##### ②更新浏览量时去更新redsi中的数据\n\nRedisCache增加方法   \n\n```java\n    public void incrementCacheMapValue(String key,String hKey,long v){\n        redisTemplate.boundHashOps(key).increment(hKey, v);\n    }\n```\n\nArticleController中增加方法更新阅读数\n\n```java\n    @PutMapping(\"/updateViewCount/{id}\")\n    public ResponseResult updateViewCount(@PathVariable(\"id\") Long id){\n        return articleService.updateViewCount(id);\n    }\n```\n\nArticleService中增加方法\n\n```java\nResponseResult updateViewCount(Long id);\n```\n\nArticleServiceImpl中实现方法\n\n```java\n    @Override\n    public ResponseResult updateViewCount(Long id) {\n        //更新redis中对应 id的浏览量\n        redisCache.incrementCacheMapValue(\"article:viewCount\",id.toString(),1);\n        return ResponseResult.okResult();\n    }\n```\n\n\n\n\n\n\n\n##### ③定时任务每隔10分钟把Redis中的浏览量更新到数据库中\n\nArticle中增加构造方法\n\n```java\n    public Article(Long id, long viewCount) {\n        this.id = id;\n        this.viewCount = viewCount;\n    }\n```\n\n\n\n\n\n```java\n@Component\npublic class UpdateViewCountJob {\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Autowired\n    private ArticleService articleService;\n\n    @Scheduled(cron = \"0/5 * * * * ?\")\n    public void updateViewCount(){\n        //获取redis中的浏览量\n        Map<String, Integer> viewCountMap = redisCache.getCacheMap(\"article:viewCount\");\n\n        List<Article> articles = viewCountMap.entrySet()\n                .stream()\n                .map(entry -> new Article(Long.valueOf(entry.getKey()), entry.getValue().longValue()))\n                .collect(Collectors.toList());\n        //更新到数据库中\n        articleService.updateBatchById(articles);\n\n    }\n}\n\n```\n\n\n\n##### ④读取文章浏览量时从redis读取\n\n```java\n    @Override\n    public ResponseResult getArticleDetail(Long id) {\n        //根据id查询文章\n        Article article = getById(id);\n        //从redis中获取viewCount\n        Integer viewCount = redisCache.getCacheMapValue(\"article:viewCount\", id.toString());\n        article.setViewCount(viewCount.longValue());\n        //转换成VO\n        ArticleDetailVo articleDetailVo = BeanCopyUtils.copyBean(article, ArticleDetailVo.class);\n        //根据分类id查询分类名\n        Long categoryId = articleDetailVo.getCategoryId();\n        Category category = categoryService.getById(categoryId);\n        if(category!=null){\n            articleDetailVo.setCategoryName(category.getName());\n        }\n        //封装响应返回\n        return ResponseResult.okResult(articleDetailVo);\n    }\n\n```\n\n\n\n\n\n## 4. Swagger2\n\n### 4.1 简介\n\n​    Swagger 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。\n\n### 4.2 为什么使用Swagger\n\n​    当下很多公司都采取前后端分离的开发模式，前端和后端的工作由不同的工程师完成。在这种开发模式下，维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。传统意义上的文档都是后端开发人员手动编写的，相信大家也都知道这种方式很难保证文档的及时性，这种文档久而久之也就会失去其参考意义，反而还会加大我们的沟通成本。而 Swagger 给我们提供了一个全新的维护 API 文档的方式，下面我们就来了解一下它的优点：\n\n1.代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性。\n2.跨语言性，支持 40 多种语言。\n3.Swagger UI 呈现出来的是一份可交互式的 API 文档，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程。\n\n\n\n### 4.3 快速入门\n\n#### 4.3.1 引入依赖\n\n```xml\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n        </dependency>\n\n```\n\n\n\n#### 4.3.2 启用Swagger2\n\n​    在启动类上或者配置类加 @EnableSwagger2 注解\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.sangeng.mapper\")\n@EnableScheduling\n@EnableSwagger2\npublic class SanGengBlogApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SanGengBlogApplication.class,args);\n    }\n}\n```\n\n\n\n#### 4.3.3 测试\n\n​    访问：http://localhost:7777/swagger-ui.html  注意其中localhost和7777要调整成实际项目的域名和端口号。\n\n\n\n### 4.4 具体配置\n\n\n\n#### 4.4.1 Controller配置\n\n##### 4.4.1 @Api 注解\n\n属性介绍：\n\ntags  设置标签\n\ndescription 设置描述信息\n\n```java\n@RestController\n@RequestMapping(\"/comment\")\n@Api(tags = \"评论\",description = \"评论相关接口\")\npublic class CommentController {\n}\n```\n\n\n\n\n\n#### 4.4.2 接口配置\n\n##### 4.4.2.1 接口描述配置@ApiOperation\n\n```java\n    @GetMapping(\"/linkCommentList\")\n    @ApiOperation(value = \"友链评论列表\",notes = \"获取一页友链评论\")\n    public ResponseResult linkCommentList(Integer pageNum,Integer pageSize){\n        return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);\n    }\n```\n\n\n\n##### 4.4.2.2 接口参数描述\n\n @ApiImplicitParam 用于描述接口的参数，但是一个接口可能有多个参数，所以一般与 @ApiImplicitParams 组合使用。\n\n```java\n    @GetMapping(\"/linkCommentList\")\n    @ApiOperation(value = \"友链评论列表\",notes = \"获取一页友链评论\")\n    @ApiImplicitParams({\n           @ApiImplicitParam(name = \"pageNum\",value = \"页号\"),\n           @ApiImplicitParam(name = \"pageSize\",value = \"每页大小\")\n    }\n    )\n    public ResponseResult linkCommentList(Integer pageNum,Integer pageSize){\n        return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);\n    }\n```\n\n\n\n#### 4.4.3 实体类配置\n\n##### 4.4.3.1 实体的描述配置@ApiModel\n\n@ApiModel用于描述实体类。\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = \"添加评论dto\")\npublic class AddCommentDto{\n    //..\n}\n```\n\n\n\n##### 4.4.3.2 实体的属性的描述配置@ApiModelProperty\n\n@ApiModelProperty用于描述实体的属性\n\n```java\n    @ApiModelProperty(notes = \"评论类型（0代表文章评论，1代表友链评论）\")\n    private String type;\n```\n\n\n\n\n\n\n\n#### 4.4.4 文档信息配置\n\n```java\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public Docket customDocket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.sangeng.controller\"))\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact(\"团队名\", \"http://www.my.com\", \"my@my.com\");\n        return new ApiInfoBuilder()\n                .title(\"文档标题\")\n                .description(\"文档描述\")\n                .contact(contact)   // 联系方式\n                .version(\"1.1.0\")  // 版本\n                .build();\n    }\n}\n```\n\n\n\n## 5. 博客后台\n\n### 5.0 准备工作\n\n前端工程启动\n\nnpm install\n\nnpm run dev\n\n\n\n①创建启动类\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@SpringBootApplication\n@MapperScan(\"com.sangeng.mapper\")\npublic class BlogAdminApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(BlogAdminApplication.class, args);\n    }\n}\n\n```\n\n②创建application.yml配置文件\n\n```yml\nserver:\n  port: 8989\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/sg_blog?characterEncoding=utf-8&serverTimezone=UTC\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\n\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n\n\n```\n\n③ SQL语句\n\n​    SQL脚本：SGBlog\\资源\\SQL\\sg_tag.sql\n\n④ 创建实体类，Mapper，Service \n\n​    注意思考这些文件应该写在哪个模块下？\n\n\n\nTag\n\n```java\n\n@SuppressWarnings(\"serial\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"sg_tag\")\npublic class Tag  {\n    @TableId\n    private Long id;\n\n\n    private Long createBy;\n\n    private Date createTime;\n\n    private Long updateBy;\n\n    private Date updateTime;\n    //删除标志（0代表未删除，1代表已删除）\n    private Integer delFlag;\n    //备注\n    private String remark;\n    //标签名\n    private String name;\n\n\n\n}\n\n```\n\nTagMapper\n\n```java\n/**\n * 标签(Tag)表数据库访问层\n *\n * @author makejava\n * @since 2022-07-19 22:33:35\n */\npublic interface TagMapper extends BaseMapper<Tag> {\n\n}\n\n\n\n```\n\nTagService\n\n```java\n/**\n * 标签(Tag)表服务接口\n *\n * @author makejava\n * @since 2022-07-19 22:33:38\n */\npublic interface TagService extends IService<Tag> {\n\n}\n\n```\n\nTagServiceImpl\n\n```java\n/**\n * 标签(Tag)表服务实现类\n *\n * @author makejava\n * @since 2022-07-19 22:33:38\n */\n@Service(\"tagService\")\npublic class TagServiceImpl extends ServiceImpl<TagMapper, Tag> implements TagService {\n\n}\n\n\n```\n\n\n\n⑤ 创建Controller测试接口\n\n​    注意思考这些文件应该写在哪个模块下？\n\nTagController    /content/tag\n\n```java\n@RestController\n@RequestMapping(\"/content/tag\")\npublic class TagController {\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(\"/list\")\n    public ResponseResult list(){\n        return ResponseResult.okResult(tagService.list());\n    }\n}\n\n\n```\n\n\n\n⑥添加security相关类\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n    @Autowired\n    AuthenticationEntryPoint authenticationEntryPoint;\n    @Autowired\n    AccessDeniedHandler accessDeniedHandler;\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n//                .antMatchers(\"/login\").anonymous()\n//                //注销接口需要认证才能访问\n//                .antMatchers(\"/logout\").authenticated()\n//                .antMatchers(\"/user/userInfo\").authenticated()\n//                .antMatchers(\"/upload\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n        //关闭默认的注销功能\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n\n```\n\n\n\n```java\n@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        //获取请求头中的token\n        String token = request.getHeader(\"token\");\n        if(!StringUtils.hasText(token)){\n            //说明该接口不需要登录  直接放行\n            filterChain.doFilter(request, response);\n            return;\n        }\n        //解析获取userid\n        Claims claims = null;\n        try {\n            claims = JwtUtil.parseJWT(token);\n        } catch (Exception e) {\n            e.printStackTrace();\n            //token超时  token非法\n            //响应告诉前端需要重新登录\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        String userId = claims.getSubject();\n        //从redis中获取用户信息\n        LoginUser loginUser = redisCache.getCacheObject(\"login:\" + userId);\n        //如果获取不到\n        if(Objects.isNull(loginUser)){\n            //说明登录过期  提示重新登录\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n            return;\n        }\n        //存入SecurityContextHolder\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(loginUser,null,null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n\n        filterChain.doFilter(request, response);\n    }\n\n\n}\n\n```\n\n\n\n### 5.1 后台登录\n\n​    后台的认证授权也使用SpringSecurity安全框架来实现。\n\n#### 5.1.0 需求\n\n​    需要实现登录功能\n\n​    后台所有功能都必须登录才能使用。\n\n#### 5.1.1 接口设计\n\n| 请求方式 | 请求路径        |\n| ---- | ----------- |\n| POST | /user/login |\n\n请求体：\n\n```json\n{\n    \"userName\":\"sg\",\n    \"password\":\"1234\"\n}\n```\n\n响应格式：\n\n```json\n{\n    \"code\": 200,\n    \"data\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ODBmOThmYmJkNmI0NjM0OWUyZjY2NTM0NGNjZWY2NSIsInN1YiI6IjEiLCJpc3MiOiJzZyIsImlhdCI6MTY0Mzg3NDMxNiwiZXhwIjoxNjQzOTYwNzE2fQ.ldLBUvNIxQCGemkCoMgT_0YsjsWndTg5tqfJb77pabk\"\n    },\n    \"msg\": \"操作成功\"\n}\n```\n\n#### 5.1.2 思路分析\n\n登录\n\n​    ①自定义登录接口  \n\n​                调用ProviderManager的方法进行认证 如果认证通过生成jwt\n\n​                把用户信息存入redis中\n\n​    ②自定义UserDetailsService \n\n​                在这个实现类中去查询数据库\n\n​    注意配置passwordEncoder为BCryptPasswordEncoder\n\n校验：\n\n​    ①定义Jwt认证过滤器\n\n​                获取token\n\n​                解析token获取其中的userid\n\n​                从redis中获取用户信息\n\n​                存入SecurityContextHolder\n\n#### 5.1.3 准备工作\n\n①添加依赖\n\n前面已经添加过相关依赖，不需要做什么处理\n\n```xml\n        <!--redis依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <!--fastjson依赖-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.33</version>\n        </dependency>\n        <!--jwt依赖-->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.9.0</version>\n        </dependency>\n```\n\n\n\n\n\n#### 5.1.4 登录接口代码实现\n\n##### LoginController\n\n复制一份BlogLoginController ，命名为LoginController，其中注入 LoginService \n\n请求地址修改为/user/login即可\n\n\n\n```java\n@RestController\npublic class LoginController {\n    @Autowired\n    private LoginService loginService;\n\n    @PostMapping(\"/user/login\")\n    public ResponseResult login(@RequestBody User user){\n        if(!StringUtils.hasText(user.getUserName())){\n            //提示 必须要传用户名\n            throw new SystemException(AppHttpCodeEnum.REQUIRE_USERNAME);\n        }\n        return loginService.login(user);\n    }\n\n}\n```\n\n\n\n##### LoginService\n\n复制一份BlogLoginService命名为LoginService即可\n\n```java\npublic interface LoginService {\n    ResponseResult login(User user);\n\n}\n\n```\n\n\n\n##### SecurityConfig\n\n之前已经复制过了\n\n\n\n\n\n##### SystemLoginServiceImpl\n\n复制一份，LoginServiceImpl，命名为SystemLoginServiceImpl  实现 LoginService\n\nlogin方法中存redis的key的前缀修改为login\n\n返回的数据中只要返回token\n\n\n\n```java\n@Service\npublic class SystemLoginServiceImpl implements LoginService {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    public ResponseResult login(User user) {\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());\n        Authentication authenticate = authenticationManager.authenticate(authenticationToken);\n        //判断是否认证通过\n        if(Objects.isNull(authenticate)){\n            throw new RuntimeException(\"用户名或密码错误\");\n        }\n        //获取userid 生成token\n        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();\n        String userId = loginUser.getUser().getId().toString();\n        String jwt = JwtUtil.createJWT(userId);\n        //把用户信息存入redis\n        redisCache.setCacheObject(\"login:\"+userId,loginUser);\n\n        //把token封装 返回\n        Map<String,String> map = new HashMap<>();\n        map.put(\"token\",jwt);\n        return ResponseResult.okResult(map);\n    }\n}\n```\n\n\n\n##### UserDetailServiceImpl\n\n复用原来的即可\n\n##### LoginUser\n\n复用原来的即可\n\n\n\n\n\n### 5.2 后台权限控制及动态路由\n\n#### 需求\n\n​    后台系统需要能实现不同的用户权限可以看到不同的功能。\n\n​    用户只能使用他的权限所允许使用的功能。\n\n\n\n#### 功能设计\n\n​    之前在我的SpringSecurity的课程中就介绍过RBAC权限模型。没有学习过的可以去看下 [RBAC权限模型](https://www.bilibili.com/video/BV1mm4y1X7Hc?p=28)  。这里我们就是在RBAC权限模型的基础上去实现这个功能。\n\n​    \n\n#### 表分析\n\n​    通过需求去分析需要有哪些字段。\n\n​    建表SQL及初始化数据见：SGBlog\\资源\\SQL\\sg_menu.sql\n\n\n\n#### 接口设计\n\n##### getInfo接口\n\n是\n\n| 请求方式 | 请求地址     | 请求头        |\n| ---- | -------- | ---------- |\n| GET  | /getInfo | 需要token请求头 |\n\n请求参数：\n\n无\n\n响应格式:\n\n如果用户id为1代表管理员，roles 中只需要有admin，permissions中需要有所有菜单类型为C或者F的，状态为正常的，未被删除的权限\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"permissions\":[\n            \"system:user:list\",\n            \"system:role:list\",\n            \"system:menu:list\",\n            \"system:user:query\",\n            \"system:user:add\"\n            //此次省略1000字\n        ],\n        \"roles\":[\n            \"admin\"\n        ],\n        \"user\":{\n            \"avatar\":\"http://r7yxkqloa.bkt.clouddn.com/2022/03/05/75fd15587811443a9a9a771f24da458d.png\",\n            \"email\":\"23412332@qq.com\",\n            \"id\":1,\n            \"nickName\":\"sg3334\",\n            \"sex\":\"1\"\n        }\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### getRouters接口\n\n| 请求方式 | 请求地址        | 请求头        |\n| ---- | ----------- | ---------- |\n| GET  | /getRouters | 需要token请求头 |\n\n请求参数：\n\n无\n\n响应格式:\n\n​    前端为了实现动态路由的效果，需要后端有接口能返回用户所能访问的菜单数据。\n\n​    注意：**返回的菜单数据需要体现父子菜单的层级关系**\n\n​    如果用户id为1代表管理员，menus中需要有所有菜单类型为C或者M的，状态为正常的，未被删除的权限\n\n​    数据格式如下：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"menus\":[\n            {\n                \"children\":[],\n                \"component\":\"content/article/write/index\",\n                \"createTime\":\"2022-01-08 11:39:58\",\n                \"icon\":\"build\",\n                \"id\":2023,\n                \"menuName\":\"写博文\",\n                \"menuType\":\"C\",\n                \"orderNum\":\"0\",\n                \"parentId\":0,\n                \"path\":\"write\",\n                \"perms\":\"content:article:writer\",\n                \"status\":\"0\",\n                \"visible\":\"0\"\n            },\n            {\n                \"children\":[\n                    {\n                        \"children\":[],\n                        \"component\":\"system/user/index\",\n                        \"createTime\":\"2021-11-12 18:46:19\",\n                        \"icon\":\"user\",\n                        \"id\":100,\n                        \"menuName\":\"用户管理\",\n                        \"menuType\":\"C\",\n                        \"orderNum\":\"1\",\n                        \"parentId\":1,\n                        \"path\":\"user\",\n                        \"perms\":\"system:user:list\",\n                        \"status\":\"0\",\n                        \"visible\":\"0\"\n                    },\n                    {\n                        \"children\":[],\n                        \"component\":\"system/role/index\",\n                        \"createTime\":\"2021-11-12 18:46:19\",\n                        \"icon\":\"peoples\",\n                        \"id\":101,\n                        \"menuName\":\"角色管理\",\n                        \"menuType\":\"C\",\n                        \"orderNum\":\"2\",\n                        \"parentId\":1,\n                        \"path\":\"role\",\n                        \"perms\":\"system:role:list\",\n                        \"status\":\"0\",\n                        \"visible\":\"0\"\n                    },\n                    {\n                        \"children\":[],\n                        \"component\":\"system/menu/index\",\n                        \"createTime\":\"2021-11-12 18:46:19\",\n                        \"icon\":\"tree-table\",\n                        \"id\":102,\n                        \"menuName\":\"菜单管理\",\n                        \"menuType\":\"C\",\n                        \"orderNum\":\"3\",\n                        \"parentId\":1,\n                        \"path\":\"menu\",\n                        \"perms\":\"system:menu:list\",\n                        \"status\":\"0\",\n                        \"visible\":\"0\"\n                    }\n                ],\n                \"createTime\":\"2021-11-12 18:46:19\",\n                \"icon\":\"system\",\n                \"id\":1,\n                \"menuName\":\"系统管理\",\n                \"menuType\":\"M\",\n                \"orderNum\":\"1\",\n                \"parentId\":0,\n                \"path\":\"system\",\n                \"perms\":\"\",\n                \"status\":\"0\",\n                \"visible\":\"0\"\n            }\n        ]\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 代码实现\n\n##### 准备工作\n\n​    生成menu和role表对于的类\n\n##### getInfo接口\n\n\n\n```java\n@Data\n@Accessors(chain = true)\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AdminUserInfoVo {\n\n    private List<String> permissions;\n\n    private List<String> roles;\n\n    private UserInfoVo user;\n}\n```\n\n\n\n```java\n@RestController\npublic class LoginController {\n    @Autowired\n    private LoginService loginService;\n\n    @Autowired\n    private MenuService menuService;\n\n    @Autowired\n    private RoleService roleService;\n\n    @PostMapping(\"/user/login\")\n    public ResponseResult login(@RequestBody User user){\n        if(!StringUtils.hasText(user.getUserName())){\n            //提示 必须要传用户名\n            throw new SystemException(AppHttpCodeEnum.REQUIRE_USERNAME);\n        }\n        return loginService.login(user);\n    }\n\n    @GetMapping(\"getInfo\")\n    public ResponseResult<AdminUserInfoVo> getInfo(){\n        //获取当前登录的用户\n        LoginUser loginUser = SecurityUtils.getLoginUser();\n        //根据用户id查询权限信息\n        List<String> perms = menuService.selectPermsByUserId(loginUser.getUser().getId());\n        //根据用户id查询角色信息\n        List<String> roleKeyList = roleService.selectRoleKeyByUserId(loginUser.getUser().getId());\n\n        //获取用户信息\n        User user = loginUser.getUser();\n        UserInfoVo userInfoVo = BeanCopyUtils.copyBean(user, UserInfoVo.class);\n        //封装数据返回\n\n        AdminUserInfoVo adminUserInfoVo = new AdminUserInfoVo(perms,roleKeyList,userInfoVo);\n        return ResponseResult.okResult(adminUserInfoVo);\n    }\n\n}\n```\n\n\n\n\n\nRoleServiceImpl  selectRoleKeyByUserId方法\n\n```java\n@Service(\"menuService\")\npublic class MenuServiceImpl extends ServiceImpl<MenuMapper, Menu> implements MenuService {\n\n    @Override\n    public List<String> selectPermsByUserId(Long id) {\n        //如果是管理员，返回所有的权限\n        if(id == 1L){\n            LambdaQueryWrapper<Menu> wrapper = new LambdaQueryWrapper<>();\n            wrapper.in(Menu::getMenuType,SystemConstants.MENU,SystemConstants.BUTTON);\n            wrapper.eq(Menu::getStatus,SystemConstants.STATUS_NORMAL);\n            List<Menu> menus = list(wrapper);\n            List<String> perms = menus.stream()\n                    .map(Menu::getPerms)\n                    .collect(Collectors.toList());\n            return perms;\n        }\n        //否则返回所具有的权限\n        return getBaseMapper().selectPermsByUserId(id);\n    }\n}\n```\n\nMenuMapper \n\n```java\n/**\n * 菜单权限表(Menu)表数据库访问层\n *\n * @author makejava\n * @since 2022-08-09 22:32:07\n */\npublic interface MenuMapper extends BaseMapper<Menu> {\n\n    List<String> selectPermsByUserId(Long userId);\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.sangeng.mapper.MenuMapper\">\n\n    <select id=\"selectPermsByUserId\" resultType=\"java.lang.String\">\n        SELECT\n            DISTINCT m.perms\n        FROM\n            `sys_user_role` ur\n            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`\n            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`\n        WHERE\n            ur.`user_id` = #{userId} AND\n            m.`menu_type` IN (\'C\',\'F\') AND\n            m.`status` = 0 AND\n            m.`del_flag` = 0\n    </select>\n</mapper>\n```\n\n\n\n\n\nMenuServiceImpl  selectPermsByUserId方法\n\n```java\n@Service(\"roleService\")\npublic class RoleServiceImpl extends ServiceImpl<RoleMapper, Role> implements RoleService {\n\n    @Override\n    public List<String> selectRoleKeyByUserId(Long id) {\n        //判断是否是管理员 如果是返回集合中只需要有admin\n        if(id == 1L){\n            List<String> roleKeys = new ArrayList<>();\n            roleKeys.add(\"admin\");\n            return roleKeys;\n        }\n        //否则查询用户所具有的角色信息\n        return getBaseMapper().selectRoleKeyByUserId(id);\n    }\n}\n```\n\n```java\npublic interface RoleMapper extends BaseMapper<Role> {\n\n    List<String> selectRoleKeyByUserId(Long userId);\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.sangeng.mapper.RoleMapper\">\n    <select id=\"selectRoleKeyByUserId\" resultType=\"java.lang.String\">\n        SELECT\n            r.`role_key`\n        FROM\n            `sys_user_role` ur\n            LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`\n        WHERE\n            ur.`user_id` = #{userId} AND\n            r.`status` = 0 AND\n            r.`del_flag` = 0\n    </select>\n</mapper>\n```\n\n\n\n\n\n##### getRouters接口\n\nRoutersVo\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class RoutersVo {\n\n    private List<Menu> menus;\n}\n\n```\n\n\n\nLoginController\n\n```java\n    @GetMapping(\"getRouters\")\n    public ResponseResult<RoutersVo> getRouters(){\n        Long userId = SecurityUtils.getUserId();\n        //查询menu 结果是tree的形式\n        List<Menu> menus = menuService.selectRouterMenuTreeByUserId(userId);\n        //封装数据返回\n        return ResponseResult.okResult(new RoutersVo(menus));\n    }\n\n```\n\nMenuService\n\n```java\npublic interface MenuService extends IService<Menu> {\n\n    List<String> selectPermsByUserId(Long id);\n\n    List<Menu> selectRouterMenuTreeByUserId(Long userId);\n}\n\n```\n\nMenuServiceImpl\n\n```java\n@Override\n    public List<Menu> selectRouterMenuTreeByUserId(Long userId) {\n        MenuMapper menuMapper = getBaseMapper();\n        List<Menu> menus = null;\n        //判断是否是管理员\n        if(SecurityUtils.isAdmin()){\n            //如果是 获取所有符合要求的Menu\n            menus = menuMapper.selectAllRouterMenu();\n        }else{\n            //否则  获取当前用户所具有的Menu\n            menus = menuMapper.selectRouterMenuTreeByUserId(userId);\n        }\n\n        //构建tree\n        //先找出第一层的菜单  然后去找他们的子菜单设置到children属性中\n        List<Menu> menuTree = builderMenuTree(menus,0L);\n        return menuTree;\n    }\n\n    private List<Menu> builderMenuTree(List<Menu> menus, Long parentId) {\n        List<Menu> menuTree = menus.stream()\n                .filter(menu -> menu.getParentId().equals(parentId))\n                .map(menu -> menu.setChildren(getChildren(menu, menus)))\n                .collect(Collectors.toList());\n        return menuTree;\n    }\n\n    /**\n     * 获取存入参数的 子Menu集合\n     * @param menu\n     * @param menus\n     * @return\n     */\n    private List<Menu> getChildren(Menu menu, List<Menu> menus) {\n        List<Menu> childrenList = menus.stream()\n                .filter(m -> m.getParentId().equals(menu.getId()))\n                .map(m->m.setChildren(getChildren(m,menus)))\n                .collect(Collectors.toList());\n        return childrenList;\n    }\n```\n\nMenuMapper.java\n\n```java\n    List<Menu> selectAllRouterMenu();\n\n    List<Menu> selectRouterMenuTreeByUserId(Long userId);\n```\n\n\n\nMenuMapper.xml\n\n```xml\n <select id=\"selectAllRouterMenu\" resultType=\"com.sangeng.domain.entity.Menu\">\n        SELECT\n          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,\'\') AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time\n        FROM\n            `sys_menu` m\n        WHERE\n            m.`menu_type` IN (\'C\',\'M\') AND\n            m.`status` = 0 AND\n            m.`del_flag` = 0\n        ORDER BY\n            m.parent_id,m.order_num\n    </select>\n    <select id=\"selectRouterMenuTreeByUserId\" resultType=\"com.sangeng.domain.entity.Menu\">\n        SELECT\n          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,\'\') AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time\n        FROM\n            `sys_user_role` ur\n            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`\n            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`\n        WHERE\n            ur.`user_id` = #{userId} AND\n            m.`menu_type` IN (\'C\',\'M\') AND\n            m.`status` = 0 AND\n            m.`del_flag` = 0\n        ORDER BY\n            m.parent_id,m.order_num\n    </select>\n```\n\n\n\n查询的列：\n\nSELECT DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,\'\') AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time\n\n注意需要按照parent_id和order_num排序\n\n\n\n\n\n### 5.3 退出登录接口\n\n#### 5.3.1 接口设计\n\n\n\n| 请求方式 | 请求地址         | 请求头        |\n| ---- | ------------ | ---------- |\n| POST | /user/logout | 需要token请求头 |\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"操作成功\"\n}\n```\n\n\n\n#### 5.3.2 代码实现\n\n要实现的操作：\n\n​    删除redis中的用户信息\n\nLoginController\n\n```java\n    @PostMapping(\"/user/logout\")\n    public ResponseResult logout(){\n        return loginServcie.logout();\n    }\n```\n\nLoginService\n\n```java\nResponseResult logout();\n```\n\nSystemLoginServiceImpl\n\n```java\n    @Override\n    public ResponseResult logout() {\n        //获取当前登录的用户id\n        Long userId = SecurityUtils.getUserId();\n        //删除redis中对应的值\n        redisCache.deleteObject(\"login:\"+userId);\n        return ResponseResult.okResult();\n    }\n```\n\nSecurityConfig\n\n要关闭默认的退出登录功能。并且要配置我们的退出登录接口需要认证才能访问\n\n```java\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(\"/user/login\").anonymous()\n//                //注销接口需要认证才能访问\n//                .antMatchers(\"/logout\").authenticated()\n//                .antMatchers(\"/user/userInfo\").authenticated()\n//                .antMatchers(\"/upload\").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().authenticated();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n        //关闭默认的注销功能\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n```\n\n\n\n\n\n\n\n\n\n\n\n### 5.4 查询标签列表\n\n#### 5.4.0 需求\n\n​    为了方便后期对文章进行管理，需要提供标签的功能，一个文章可以有多个标签。\n\n​    在后台需要分页查询标签功能，要求能根据标签名进行分页查询。 **后期可能会增加备注查询等需求**。\n\n​    注意：不能把删除了的标签查询出来。\n\n#### 5.4.1 标签表分析\n\n​    通过需求去分析需要有哪些字段。\n\n#### 5.4.2 接口设计\n\n\n\n| 请求方式 | 请求路径             |\n| ---- | ---------------- |\n| Get  | content/tag/list |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\nname：标签名\n\nremark：备注\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"id\":4,\n                \"name\":\"Java\",\n                \"remark\":\"sdad\"\n            }\n        ],\n        \"total\":1\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 5.4.3 代码实现\n\nController\n\n```java\n@RestController\n@RequestMapping(\"/content/tag\")\npublic class TagController {\n    @Autowired\n    private TagService tagService;\n\n    @GetMapping(\"/list\")\n    public ResponseResult<PageVo> list(Integer pageNum, Integer pageSize, TagListDto tagListDto){\n        return tagService.pageTagList(pageNum,pageSize,tagListDto);\n    }\n}\n\n\n```\n\n\n\nService\n\n```java\npublic interface TagService extends IService<Tag> {\n\n    ResponseResult<PageVo> pageTagList(Integer pageNum, Integer pageSize, TagListDto tagListDto);\n}\n\n```\n\n```java\n@Service(\"tagService\")\npublic class TagServiceImpl extends ServiceImpl<TagMapper, Tag> implements TagService {\n\n    @Override\n    public ResponseResult<PageVo> pageTagList(Integer pageNum, Integer pageSize, TagListDto tagListDto) {\n        //分页查询\n        LambdaQueryWrapper<Tag> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(StringUtils.hasText(tagListDto.getName()),Tag::getName,tagListDto.getName());\n        queryWrapper.eq(StringUtils.hasText(tagListDto.getRemark()),Tag::getRemark,tagListDto.getRemark());\n\n        Page<Tag> page = new Page<>();\n        page.setCurrent(pageNum);\n        page.setSize(pageSize);\n        page(page, queryWrapper);\n        //封装数据返回\n        PageVo pageVo = new PageVo(page.getRecords(),page.getTotal());\n        return ResponseResult.okResult(pageVo);\n    }\n}\n```\n\n\n\n### 5.5 新增标签\n\n#### 5.5.0 需求\n\n​    点击标签管理的新增按钮可以实现新增标签的功能。\n\n#### 5.5.1 接口设计\n\n\n\n| 请求方式 | 请求地址         | 请求头        |\n| ---- | ------------ | ---------- |\n| POST | /content/tag | 需要token请求头 |\n\n请求体格式:\n\n```json\n{\"name\":\"c#\",\"remark\":\"c++++\"}\n```\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 5.5.2 测试\n\n测试时注意，添加到数据库中的记录有没有 创建时间，更新时间，创建人，更新人字段。\n\n\n\n\n\n### 5.6 删除标签\n\n#### 5.6.1 接口设计\n\n\n\n| 请求方式   | 请求地址              | 请求头        |\n| ------ | ----------------- | ---------- |\n| DELETE | /content/tag/{id} | 需要token请求头 |\n\n请求参数在path中\n\n例如：content/tag/6   代表删除id为6的标签数据\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 5.6.2 测试\n\n注意测试删除后在列表中是否查看不到该条数据\n\n数据库中该条数据还是存在的，只是修改了逻辑删除字段的值\n\n\n\n\n\n### 5.7 修改标签\n\n#### 5.7.1 接口设计\n\n##### 5.7.1.1 获取标签信息\n\n| 请求方式 | 请求地址              | 请求头        |\n| ---- | ----------------- | ---------- |\n| GET  | /content/tag/{id} | 需要token请求头 |\n\n请求参数在path中\n\n例如：content/tag/6   代表获取id为6的标签数据\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"id\":4,\n        \"name\":\"Java\",\n        \"remark\":\"sdad\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### 5.7.1.2 修改标签接口\n\n\n\n| 请求方式 | 请求地址         | 请求头        |\n| ---- | ------------ | ---------- |\n| PUT  | /content/tag | 需要token请求头 |\n\n请求体格式：\n\n```json\n{\"id\":7,\"name\":\"c#\",\"remark\":\"c++++\"}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.8 写博文\n\n#### 5.8.1 需求\n\n​    需要提供写博文的功能，写博文时需要关联分类和标签。\n\n​    可以上传缩略图，也可以在正文中添加图片。\n\n​    文章可以直接发布，也可以保存到草稿箱。\n\n\n\n#### 5.8.2 表分析\n\n​    标签和文章需要关联所以需要一张关联表。\n\n​    SQL脚本：SGBlog\\资源\\SQL\\sg_article_tag.sql\n\n\n\n#### 5.8.2 接口设计\n\n​    思考下需要哪些接口才能实现这个功能？\n\n\n\n##### 5.8.2.1 查询所有分类接口\n\n\n\n| 请求方式 | 请求地址                              | 请求头        |\n| ---- | --------------------------------- | ---------- |\n| GET  | /content/category/listAllCategory | 需要token请求头 |\n\n请求参数：\n\n​    无\n\n\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":[\n        {\n            \"description\":\"wsd\",\n            \"id\":1,\n            \"name\":\"java\"\n        },\n        {\n            \"description\":\"wsd\",\n            \"id\":2,\n            \"name\":\"PHP\"\n        }\n    ],\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### 5.8.2.2 查询所有标签接口\n\n\n\n| 请求方式 | 请求地址                    | 请求头        |\n| ---- | ----------------------- | ---------- |\n| GET  | /content/tag/listAllTag | 需要token请求头 |\n\n请求参数:\n\n​    无\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":[\n        {\n            \"id\":1,\n            \"name\":\"Mybatis\"\n        },\n        {\n            \"id\":4,\n            \"name\":\"Java\"\n        }\n    ],\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n##### 5.8.2.3 上传图片\n\n\n\n| 请求方式 | 请求地址    | 请求头        |\n| ---- | ------- | ---------- |\n| POST | /upload | 需要token请求头 |\n\n参数：\n\n​    img,值为要上传的文件\n\n请求头：\n\n​    Content-Type ：multipart/form-data;\n\n\n\n响应格式:\n\n```json\n{\n    \"code\": 200,\n    \"data\": \"文件访问链接\",\n    \"msg\": \"操作成功\"\n}\n```\n\n\n\n##### 5.8.2.4 新增博文\n\n\n\n| 请求方式 | 请求地址             | 请求头        |\n| ---- | ---------------- | ---------- |\n| POST | /content/article | 需要token请求头 |\n\n请求体格式：\n\n```json\n{\n    \"title\":\"测试新增博文\",\n    \"thumbnail\":\"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/08/21/4ceebc07e7484beba732f12b0d2c43a9.png\",\n    \"isTop\":\"0\",\n    \"isComment\":\"0\",\n    \"content\":\"# 一级标题\\n## 二级标题\\n![Snipaste_20220228_224837.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/08/21/c3af554d4a0f4935b4073533a4c26ee8.png)\\n正文\",\n    \"tags\":[\n        1,\n        4\n    ],\n    \"categoryId\":1,\n    \"summary\":\"哈哈\",\n    \"status\":\"1\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n#### 5.8.3 代码实现\n\n\n\n##### 5.8.3.1 查询所有分类接口\n\nCategoryController\n\n\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@RestController\n@RequestMapping(\"/content/category\")\npublic class CategoryController {\n    @Autowired\n    private CategoryService categoryService;\n\n    @GetMapping(\"/listAllCategory\")\n    public ResponseResult listAllCategory(){\n        List<CategoryVo> list = categoryService.listAllCategory();\n        return ResponseResult.okResult(list);\n    }\n\n\n}\n\n```\n\n\n\nCategoryVo修改,增加description属性\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class CategoryVo {\n\n    private Long id;\n    private String name;\n    //描述\n    private String description;\n}\n```\n\nCategoryService增加listAllCategory方法\n\n```java\npublic interface CategoryService extends IService<Category> {\n\n\n    ResponseResult getCategoryList();\n\n    List<CategoryVo> listAllCategory();\n}\n\n```\n\nSystemConstants中增加常量\n\n```java\n    /** 正常状态 */\n    public static final String NORMAL = \"0\";\n```\n\n\n\n\n\nCategoryServiceImpl增加方法\n\n```java\n    @Override\n    public List<CategoryVo> listAllCategory() {\n        LambdaQueryWrapper<Category> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(Category::getStatus, SystemConstants.NORMAL);\n        List<Category> list = list(wrapper);\n        List<CategoryVo> categoryVos = BeanCopyUtils.copyBeanList(list, CategoryVo.class);\n        return categoryVos;\n    }\n```\n\n\n\n\n\n##### 5.8.3.2 查询所有标签接口\n\nTagVo\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class TagVo {\n    private Long id;\n\n    //标签名\n    private String name;\n\n\n\n}\n\n```\n\n\n\nTagController\n\n```java\n    @GetMapping(\"/listAllTag\")\n    public ResponseResult listAllTag(){\n        List<TagVo> list = tagService.listAllTag();\n        return ResponseResult.okResult(list);\n    }\n```\n\n\n\nTagService 增加listAllTag方法\n\n```java\nList<TagVo> listAllTag();\n\n```\n\nTagServiceImpl\n\n```java\n    @Override\n    public List<TagVo> listAllTag() {\n        LambdaQueryWrapper<Tag> wrapper = new LambdaQueryWrapper<>();\n        wrapper.select(Tag::getId,Tag::getName);\n        List<Tag> list = list(wrapper);\n        List<TagVo> tagVos = BeanCopyUtils.copyBeanList(list, TagVo.class);\n        return tagVos;\n    }\n```\n\n\n\n\n\n##### 5.8.3.3 上传图片接口\n\n在sangeng-admin中增加UploadController\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@RestController\npublic class UploadController {\n\n    @Autowired\n    private UploadService uploadService;\n\n    @PostMapping(\"/upload\")\n    public ResponseResult uploadImg(@RequestParam(\"img\") MultipartFile multipartFile) {\n        try {\n            return uploadService.uploadImg(multipartFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"文件上传上传失败\");\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n##### 5.8.3.4 新增博文接口\n\n\n\nArticleController\n\n```java\n/**\n * @Author 三更  B站： https://space.bilibili.com/663528522\n */\n@RestController\n@RequestMapping(\"/content/article\")\npublic class ArticleController {\n\n    @Autowired\n    private ArticleService articleService;\n\n    @PostMapping\n    public ResponseResult add(@RequestBody AddArticleDto article){\n        return articleService.add(article);\n    }\n\n\n}\n\n```\n\n\n\nAddArticleDto\n\n注意增加tags属性用于接收文章关联标签的id\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AddArticleDto {\n\n    private Long id;\n    //标题\n    private String title;\n    //文章内容\n    private String content;\n    //文章摘要\n    private String summary;\n    //所属分类id\n    private Long categoryId;\n\n    //缩略图\n    private String thumbnail;\n    //是否置顶（0否，1是）\n    private String isTop;\n    //状态（0已发布，1草稿）\n    private String status;\n    //访问量\n    private Long viewCount;\n    //是否允许评论 1是，0否\n    private String isComment;\n    private List<Long> tags;\n\n}\n\n```\n\n\n\n\n\n\n\nArticle 修改这样创建时间创建人修改时间修改人可以自动填充\n\n```java\n    @TableField(fill = FieldFill.INSERT)\n    private Long createBy;\n    @TableField(fill = FieldFill.INSERT)\n    private Date createTime;\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updateBy;\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Date updateTime;\n```\n\n\n\n\n\nArticleService增加方法\n\n```java\nResponseResult add(AddArticleDto article);\n```\n\n\n\n创建ArticleTag表相关的实体类，mapper，service,serviceimpl等\n\n```java\n@TableName(value=\"sg_article_tag\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ArticleTag implements Serializable {\n    private static final long serialVersionUID = 625337492348897098L;\n\n    /**\n    * 文章id\n    */\n    private Long articleId;\n    /**\n    * 标签id\n    */\n    private Long tagId;\n\n\n\n}\n```\n\n\n\n\n\nArticleServiceImpl增加如下代码\n\n```java\n    @Autowired\n    private ArticleTagService articleTagService;\n\n    @Override\n    @Transactional\n    public ResponseResult add(AddArticleDto articleDto) {\n        //添加 博客\n        Article article = BeanCopyUtils.copyBean(articleDto, Article.class);\n        save(article);\n\n\n        List<ArticleTag> articleTags = articleDto.getTags().stream()\n                .map(tagId -> new ArticleTag(article.getId(), tagId))\n                .collect(Collectors.toList());\n\n        //添加 博客和标签的关联\n        articleTagService.saveBatch(articleTags);\n        return ResponseResult.okResult();\n    }\n```\n\n\n\n\n\n\n\n### 5.9 导出所有分类到Excel\n\n#### 5.9.1 需求\n\n\n\n​    在分类管理中点击导出按钮可以把所有的分类导出到Excel文件中。\n\n​    \n\n#### 5.9.2 技术方案\n\n​    使用EasyExcel实现Excel的导出操作。\n\n​    https://github.com/alibaba/easyexcel\n\n​    https://easyexcel.opensource.alibaba.com/docs/current/quickstart/write#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1\n\n#### 5.9.3 接口设计\n\n​    \n\n| 请求方式 | 请求地址                     | 请求头        |\n| ---- | ------------------------ | ---------- |\n| GET  | /content/category/export | 需要token请求头 |\n\n请求参数：\n\n​    无\n\n\n\n\n\n响应格式：\n\n成功的话可以直接导出一个Excel文件\n\n\n\n失败的话响应格式如下：\n\n```json\n{\n    \"code\":500,\n    \"msg\":\"出现错误\"\n}\n```\n\n\n\n#### 5.9.4 代码实现\n\n工具类方法修改\n\nWebUtils\n\n```java\n    public static void setDownLoadHeader(String filename, HttpServletResponse response) throws UnsupportedEncodingException {\n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        response.setCharacterEncoding(\"utf-8\");\n        String fname= URLEncoder.encode(filename,\"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n        response.setHeader(\"Content-disposition\",\"attachment; filename=\"+fname);\n    }\n```\n\n\n\nCategoryController\n\n```java\n    @GetMapping(\"/export\")\n    public void export(HttpServletResponse response){\n        try {\n            //设置下载文件的请求头\n            WebUtils.setDownLoadHeader(\"分类.xlsx\",response);\n            //获取需要导出的数据\n            List<Category> categoryVos = categoryService.list();\n\n            List<ExcelCategoryVo> excelCategoryVos = BeanCopyUtils.copyBeanList(categoryVos, ExcelCategoryVo.class);\n            //把数据写入到Excel中\n            EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(\"分类导出\")\n                    .doWrite(excelCategoryVos);\n\n        } catch (Exception e) {\n            //如果出现异常也要响应json\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n        }\n    }\n```\n\n\n\n\n\nExcelCategoryVo\n\n```java\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ExcelCategoryVo {\n    @ExcelProperty(\"分类名\")\n    private String name;\n    //描述\n    @ExcelProperty(\"描述\")\n    private String description;\n\n    //状态0:正常,1禁用\n    @ExcelProperty(\"状态0:正常,1禁用\")\n    private String status;\n}\n\n```\n\n\n\n### 5.10 权限控制\n\n#### 5.10.1 需求\n\n​    需要对导出分类的接口做权限控制。\n\nsg   eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkZGJkNjM5MWJiZTA0NmMzOTc4NDg1ZTcxNWQ3YjQ0MSIsInN1YiI6IjEiLCJpc3MiOiJzZyIsImlhdCI6MTY2MjI0NDE4NywiZXhwIjoxNjYyMzMwNTg3fQ.z4JGwFN3lWyVbOCbhikCe-O4D6SvCQFEE5eQY3jDJkw\n\nsangeng\n\neyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0Y2I1ZjhmMTc0Mjk0NzM0YjI4Y2M1NTQzYjQ2Yjc1YyIsInN1YiI6IjYiLCJpc3MiOiJzZyIsImlhdCI6MTY2MjI0NDQzMywiZXhwIjoxNjYyMzMwODMzfQ.yEkbyGYXBp5ndnyq-3acdgpvqx2mnI8B9fK9f3Y6Jco\n\n#### 5.10.2 代码实现\n\n\n\nSecurityConfig\n\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n```\n\n\n\n\n\nUserDetailsServiceImpl\n\n```java\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private MenuMapper menuMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        //根据用户名查询用户信息\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUserName,username);\n        User user = userMapper.selectOne(queryWrapper);\n        //判断是否查到用户  如果没查到抛出异常\n        if(Objects.isNull(user)){\n            throw new RuntimeException(\"用户不存在\");\n        }\n        //返回用户信息\n        if(user.getType().equals(SystemConstants.ADMAIN)){\n            List<String> list = menuMapper.selectPermsByUserId(user.getId());\n            return new LoginUser(user,list);\n        }\n        return new LoginUser(user,null);\n    }\n}\n\n```\n\n\n\nLoginUser\n\n增加属性\n\n```java\nprivate List<String> permissions;\n```\n\n\n\n\n\nPermissionService\n\nhasPermisson\n\n```java\n\n@Service(\"ps\")\npublic class PermissionService {\n\n    /**\n     * 判断当前用户是否具有permission\n     * @param permission 要判断的权限\n     * @return\n     */\n    public boolean hasPermission(String permission){\n        //如果是超级管理员  直接返回true\n        if(SecurityUtils.isAdmin()){\n            return true;\n        }\n        //否则  获取当前登录用户所具有的权限列表 如何判断是否存在permission\n        List<String> permissions = SecurityUtils.getLoginUser().getPermissions();\n        return permissions.contains(permission);\n    }\n}\n```\n\n\n\nCategoryController\n\n```java\n\n    @PreAuthorize(\"@ps.hasPermission(\'content:category:export\')\")\n    @GetMapping(\"/export\")\n    public void export(HttpServletResponse response){\n        try {\n            //设置下载文件的请求头\n            WebUtils.setDownLoadHeader(\"分类.xlsx\",response);\n            //获取需要导出的数据\n            List<Category> categoryVos = categoryService.list();\n\n            List<ExcelCategoryVo> excelCategoryVos = BeanCopyUtils.copyBeanList(categoryVos, ExcelCategoryVo.class);\n            //把数据写入到Excel中\n            EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(\"分类导出\")\n                    .doWrite(excelCategoryVos);\n\n        } catch (Exception e) {\n            //如果出现异常也要响应json\n            ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n        }\n    }\n```\n\n\n\n\n\n### 5.11 文章列表\n\n#### 5.10.1 需求\n\n​    为了对文章进行管理，需要提供文章列表，\n\n​    在后台需要分页查询文章功能，要求能根据标题和摘要**模糊查询**。 \n\n​    注意：不能把删除了的文章查询出来\n\n\n\n#### 5.10.2  接口设计\n\n| 请求方式 | 请求路径                  | 是否需求token头 |\n| ---- | --------------------- | ---------- |\n| Get  | /content/article/list | 是          |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\ntitle：文章标题\n\nsummary：文章摘要\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"categoryId\":\"1\",\n                \"content\":\"嘻嘻嘻嘻嘻嘻\",\n                \"createTime\":\"2022-01-24 07:20:11\",\n                \"id\":\"1\",\n                \"isComment\":\"0\",\n                \"isTop\":\"1\",\n                \"status\":\"0\",\n                \"summary\":\"SpringSecurity框架教程-Spring Security+JWT实现项目级前端分离认证授权\",\n                \"thumbnail\":\"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/01/31/948597e164614902ab1662ba8452e106.png\",\n                \"title\":\"SpringSecurity从入门到精通\",\n                \"viewCount\":\"161\"\n            }\n        ],\n        \"total\":\"1\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n​    \n\n### 5.12 修改文章\n\n#### 5.12.1 需求\n\n​    点击文章列表中的修改按钮可以跳转到写博文页面。回显示该文章的具体信息。\n\n​    用户可以在该页面修改文章信息。点击更新按钮后修改文章。\n\n\n\n\n\n#### 5.12.2 分析\n\n​    这个功能的实现首先需要能够根据文章id查询文章的详细信息这样才能实现文章的回显。\n\n​    如何需要提供更新文章的接口。\n\n\n\n#### 5.12.3 接口设计\n\n##### 5.12.3.1 查询文章详情接口\n\n\n\n| 请求方式 | 请求路径                 | 是否需求token头 |\n| ---- | -------------------- | ---------- |\n| Get  | content/article/{id} | 是          |\n\nPath格式请求参数：\n\nid: 文章id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"categoryId\":\"1\",\n        \"content\":\"xxxxxxx\",\n        \"createBy\":\"1\",\n        \"createTime\":\"2022-08-28 15:15:46\",\n        \"delFlag\":0,\n        \"id\":\"10\",\n        \"isComment\":\"0\",\n        \"isTop\":\"1\",\n        \"status\":\"0\",\n        \"summary\":\"啊实打实\",\n        \"tags\":[\n            \"1\",\n            \"4\",\n            \"5\"\n        ],\n        \"thumbnail\":\"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/08/28/7659aac2b74247fe8ebd9e054b916dbf.png\",\n        \"title\":\"委屈饿驱蚊器\",\n        \"updateBy\":\"1\",\n        \"updateTime\":\"2022-08-28 15:15:46\",\n        \"viewCount\":\"0\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### 5.12.3.2 更新文章接口\n\n\n\n| 请求方式 | 请求路径            | 是否需求token头 |\n| ---- | --------------- | ---------- |\n| PUT  | content/article | 是          |\n\n请求体参数格式：\n\n```json\n{\n    \"categoryId\":\"1\",\n    \"content\":\"![Snipaste_20220228_224837.png](https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/08/28/f3938a0368c540ee909ba7f7079a829a.png)\\n\\n# 十大\\n## 时代的\",\n    \"createBy\":\"1\",\n    \"createTime\":\"2022-08-28 15:15:46\",\n    \"delFlag\":0,\n    \"id\":\"10\",\n    \"isComment\":\"0\",\n    \"isTop\":\"1\",\n    \"status\":\"0\",\n    \"summary\":\"啊实打实2\",\n    \"tags\":[\n        \"1\",\n        \"4\",\n        \"5\"\n    ],\n    \"thumbnail\":\"https://sg-blog-oss.oss-cn-beijing.aliyuncs.com/2022/08/28/7659aac2b74247fe8ebd9e054b916dbf.png\",\n    \"title\":\"委屈饿驱蚊器\",\n    \"updateBy\":\"1\",\n    \"updateTime\":\"2022-08-28 15:15:46\",\n    \"viewCount\":\"0\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.13 删除文章\n\n#### 5.13.1 需求\n\n​    点击文章后面的删除按钮可以删除该文章\n\n​    注意：是逻辑删除不是物理删除\n\n#### 5.13.2 接口设计\n\n​    \n\n| 请求方式   | 请求路径                 | 是否需求token头 |\n| ------ | -------------------- | ---------- |\n| DELETE | content/article/{id} | 是          |\n\nPath请求参数：\n\nid：要删除的文章id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n\n\n### 5.14 菜单列表\n\n#### 5.14.1 需求\n\n​    需要展示菜单列表，不需要分页。\n\n​    可以针对菜单名进行模糊查询\n\n​    也可以针对菜单的状态进行查询。\n\n​    菜单要按照父菜单id和orderNum进行排序\n\n#### 5.14.2 接口设计\n\n\n\n| 请求方式 | 请求路径             | 是否需求token头 |\n| ---- | ---------------- | ---------- |\n| GET  | system/menu/list | 是          |\n\nQuery请求参数：\n\nstatus  : 状态\n\nmenuName： 菜单名\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":[\n        {\n            \"component\":\"content/article/write/index\",\n            \"icon\":\"build\",\n            \"id\":\"2023\",\n            \"isFrame\":1,\n            \"menuName\":\"写博文\",\n            \"menuType\":\"C\",\n            \"orderNum\":0,\n            \"parentId\":\"0\",\n            \"path\":\"write\",\n            \"perms\":\"content:article:writer\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"system\",\n            \"id\":\"1\",\n            \"isFrame\":1,\n            \"menuName\":\"系统管理\",\n            \"menuType\":\"M\",\n            \"orderNum\":1,\n            \"parentId\":\"0\",\n            \"path\":\"system\",\n            \"perms\":\"\",\n            \"remark\":\"系统管理目录\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"table\",\n            \"id\":\"2017\",\n            \"isFrame\":1,\n            \"menuName\":\"内容管理\",\n            \"menuType\":\"M\",\n            \"orderNum\":4,\n            \"parentId\":\"0\",\n            \"path\":\"content\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"system/user/index\",\n            \"icon\":\"user\",\n            \"id\":\"100\",\n            \"isFrame\":1,\n            \"menuName\":\"用户管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":1,\n            \"parentId\":\"1\",\n            \"path\":\"user\",\n            \"perms\":\"system:user:list\",\n            \"remark\":\"用户管理菜单\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"system/role/index\",\n            \"icon\":\"peoples\",\n            \"id\":\"101\",\n            \"isFrame\":1,\n            \"menuName\":\"角色管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":2,\n            \"parentId\":\"1\",\n            \"path\":\"role\",\n            \"perms\":\"system:role:list\",\n            \"remark\":\"角色管理菜单\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"system/menu/index\",\n            \"icon\":\"tree-table\",\n            \"id\":\"102\",\n            \"isFrame\":1,\n            \"menuName\":\"菜单管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":3,\n            \"parentId\":\"1\",\n            \"path\":\"menu\",\n            \"perms\":\"system:menu:list\",\n            \"remark\":\"菜单管理菜单\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1001\",\n            \"isFrame\":1,\n            \"menuName\":\"用户查询\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:query\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1002\",\n            \"isFrame\":1,\n            \"menuName\":\"用户新增\",\n            \"menuType\":\"F\",\n            \"orderNum\":2,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:add\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1003\",\n            \"isFrame\":1,\n            \"menuName\":\"用户修改\",\n            \"menuType\":\"F\",\n            \"orderNum\":3,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:edit\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1004\",\n            \"isFrame\":1,\n            \"menuName\":\"用户删除\",\n            \"menuType\":\"F\",\n            \"orderNum\":4,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:remove\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1005\",\n            \"isFrame\":1,\n            \"menuName\":\"用户导出\",\n            \"menuType\":\"F\",\n            \"orderNum\":5,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:export\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1006\",\n            \"isFrame\":1,\n            \"menuName\":\"用户导入\",\n            \"menuType\":\"F\",\n            \"orderNum\":6,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:import\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1007\",\n            \"isFrame\":1,\n            \"menuName\":\"重置密码\",\n            \"menuType\":\"F\",\n            \"orderNum\":7,\n            \"parentId\":\"100\",\n            \"path\":\"\",\n            \"perms\":\"system:user:resetPwd\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1008\",\n            \"isFrame\":1,\n            \"menuName\":\"角色查询\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"101\",\n            \"path\":\"\",\n            \"perms\":\"system:role:query\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1009\",\n            \"isFrame\":1,\n            \"menuName\":\"角色新增\",\n            \"menuType\":\"F\",\n            \"orderNum\":2,\n            \"parentId\":\"101\",\n            \"path\":\"\",\n            \"perms\":\"system:role:add\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1010\",\n            \"isFrame\":1,\n            \"menuName\":\"角色修改\",\n            \"menuType\":\"F\",\n            \"orderNum\":3,\n            \"parentId\":\"101\",\n            \"path\":\"\",\n            \"perms\":\"system:role:edit\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1011\",\n            \"isFrame\":1,\n            \"menuName\":\"角色删除\",\n            \"menuType\":\"F\",\n            \"orderNum\":4,\n            \"parentId\":\"101\",\n            \"path\":\"\",\n            \"perms\":\"system:role:remove\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1012\",\n            \"isFrame\":1,\n            \"menuName\":\"角色导出\",\n            \"menuType\":\"F\",\n            \"orderNum\":5,\n            \"parentId\":\"101\",\n            \"path\":\"\",\n            \"perms\":\"system:role:export\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1013\",\n            \"isFrame\":1,\n            \"menuName\":\"菜单查询\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"102\",\n            \"path\":\"\",\n            \"perms\":\"system:menu:query\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1014\",\n            \"isFrame\":1,\n            \"menuName\":\"菜单新增\",\n            \"menuType\":\"F\",\n            \"orderNum\":2,\n            \"parentId\":\"102\",\n            \"path\":\"\",\n            \"perms\":\"system:menu:add\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1015\",\n            \"isFrame\":1,\n            \"menuName\":\"菜单修改\",\n            \"menuType\":\"F\",\n            \"orderNum\":3,\n            \"parentId\":\"102\",\n            \"path\":\"\",\n            \"perms\":\"system:menu:edit\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"\",\n            \"icon\":\"#\",\n            \"id\":\"1016\",\n            \"isFrame\":1,\n            \"menuName\":\"菜单删除\",\n            \"menuType\":\"F\",\n            \"orderNum\":4,\n            \"parentId\":\"102\",\n            \"path\":\"\",\n            \"perms\":\"system:menu:remove\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"content/article/index\",\n            \"icon\":\"build\",\n            \"id\":\"2019\",\n            \"isFrame\":1,\n            \"menuName\":\"文章管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":0,\n            \"parentId\":\"2017\",\n            \"path\":\"article\",\n            \"perms\":\"content:article:list\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"content/category/index\",\n            \"icon\":\"example\",\n            \"id\":\"2018\",\n            \"isFrame\":1,\n            \"menuName\":\"分类管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":1,\n            \"parentId\":\"2017\",\n            \"path\":\"category\",\n            \"perms\":\"content:category:list\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"content/link/index\",\n            \"icon\":\"404\",\n            \"id\":\"2022\",\n            \"isFrame\":1,\n            \"menuName\":\"友链管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":4,\n            \"parentId\":\"2017\",\n            \"path\":\"link\",\n            \"perms\":\"content:link:list\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"component\":\"content/tag/index\",\n            \"icon\":\"button\",\n            \"id\":\"2021\",\n            \"isFrame\":1,\n            \"menuName\":\"标签管理\",\n            \"menuType\":\"C\",\n            \"orderNum\":6,\n            \"parentId\":\"2017\",\n            \"path\":\"tag\",\n            \"perms\":\"content:tag:index\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"#\",\n            \"id\":\"2028\",\n            \"isFrame\":1,\n            \"menuName\":\"导出分类\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"2018\",\n            \"path\":\"\",\n            \"perms\":\"content:category:export\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"#\",\n            \"id\":\"2024\",\n            \"isFrame\":1,\n            \"menuName\":\"友链新增\",\n            \"menuType\":\"F\",\n            \"orderNum\":0,\n            \"parentId\":\"2022\",\n            \"path\":\"\",\n            \"perms\":\"content:link:add\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"#\",\n            \"id\":\"2025\",\n            \"isFrame\":1,\n            \"menuName\":\"友链修改\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"2022\",\n            \"path\":\"\",\n            \"perms\":\"content:link:edit\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"#\",\n            \"id\":\"2026\",\n            \"isFrame\":1,\n            \"menuName\":\"友链删除\",\n            \"menuType\":\"F\",\n            \"orderNum\":1,\n            \"parentId\":\"2022\",\n            \"path\":\"\",\n            \"perms\":\"content:link:remove\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        },\n        {\n            \"icon\":\"#\",\n            \"id\":\"2027\",\n            \"isFrame\":1,\n            \"menuName\":\"友链查询\",\n            \"menuType\":\"F\",\n            \"orderNum\":2,\n            \"parentId\":\"2022\",\n            \"path\":\"\",\n            \"perms\":\"content:link:query\",\n            \"remark\":\"\",\n            \"status\":\"0\",\n            \"visible\":\"0\"\n        }\n    ],\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.15 新增菜单\n\n#### 5.15.1 需求\n\n​    可以新增菜单\n\n#### 5.15.2 接口设计\n\n​    \n\n| 请求方式 | 请求路径            | 是否需求token头 |\n| ---- | --------------- | ---------- |\n| POST | content/article | 是          |\n\n请求体参数：\n\n​    Menu类对应的json格式\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.16 修改菜单\n\n#### 5.16.1 需求\n\n​    能够修改菜单，但是修改的时候不能把父菜单设置为当前菜单，如果设置了需要给出相应的提示。并且修改失败。\n\n#### 5.16.2 接口设计\n\n##### 5.16.2.1 根据id查询菜单数据\n\n\n\n| 请求方式 | 请求路径             | 是否需求token头 |\n| ---- | ---------------- | ---------- |\n| Get  | system/menu/{id} | 是          |\n\nPath格式请求参数：\n\nid: 菜单id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"icon\":\"table\",\n        \"id\":\"2017\",\n        \"menuName\":\"内容管理\",\n        \"menuType\":\"M\",\n        \"orderNum\":\"4\",\n        \"parentId\":\"0\",\n        \"path\":\"content\",\n        \"remark\":\"\",\n        \"status\":\"0\",\n        \"visible\":\"0\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### 5.16.2.2 更新菜单\n\n| 请求方式 | 请求路径        | 是否需求token头 |\n| ---- | ----------- | ---------- |\n| PUT  | system/menu | 是          |\n\n请求体参数：\n\n​    Menu类对应的json格式\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n如果把父菜单设置为当前菜单:\n\n```java\n{\n    \"code\":500,\n    \"msg\":\"修改菜单\'写博文\'失败，上级菜单不能选择自己\"\n}\n```\n\n\n\n### 5.17 删除菜单\n\n#### 5.17.1 需求\n\n​    能够删除菜单，但是如果要删除的菜单有子菜单则提示：存在子菜单不允许删除 并且删除失败。\n\n#### 5.17.2 接口设计\n\n\n\n| 请求方式   | 请求路径                     | 是否需求token头 |\n| ------ | ------------------------ | ---------- |\n| DELETE | content/article/{menuId} | 是          |\n\nPath参数：\n\nmenuId：要删除菜单的id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n如果要删除的菜单有子菜单则\n\n```java\n{\n    \"code\":500,\n    \"msg\":\"存在子菜单不允许删除\"\n}\n```\n\n\n\n\n\n### 5.18 角色列表\n\n#### 5.18.1 需求\n\n​    需要有角色列表分页查询的功能。\n\n​    要求能够针对角色名称进行模糊查询。\n\n​    要求能够针对状态进行查询。\n\n​    要求按照role_sort进行升序排列。\n\n#### 5.18.2 接口设计\n\n\n\n| 请求方式 | 请求路径             | 是否需求token头 |\n| ---- | ---------------- | ---------- |\n| GET  | system/role/list | 是          |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\nroleName：角色名称\n\nstatus：状态\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"id\":\"12\",\n                \"roleKey\":\"link\",\n                \"roleName\":\"友链审核员\",\n                \"roleSort\":\"1\",\n                \"status\":\"0\"\n            }\n        ],\n        \"total\":\"1\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.19 改变角色状态\n\n#### 5.19.1 需求\n\n​    要求能够修改角色的停启用状态\n\n#### 5.19.2 接口设计\n\n\n\n| 请求方式 | 请求路径                     | 是否需求token头 |\n| ---- | ------------------------ | ---------- |\n| PUT  | system/role/changeStatus | 是          |\n\n请求体：\n\n```json\n{\"roleId\":\"11\",\"status\":\"1\"}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.20 新增角色！！\n\n#### 5.20.1 需求\n\n​    需要提供新增角色的功能。新增角色时能够直接设置角色所关联的菜单权限。\n\n#### 5.20.2 接口设计\n\n##### 5.20.2.1 获取菜单树接口\n\n| 请求方式 | 请求路径                    | 是否需求token头 |\n| ---- | ----------------------- | ---------- |\n| GET  | /system/menu/treeselect | 是          |\n\n无需请求参数\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":[\n        {\n            \"children\":[],\n            \"id\":\"2023\",\n            \"label\":\"写博文\",\n            \"parentId\":\"0\"\n        },\n        {\n            \"children\":[\n                {\n                    \"children\":[\n                        {\n                            \"children\":[],\n                            \"id\":\"1001\",\n                            \"label\":\"用户查询\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1002\",\n                            \"label\":\"用户新增\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1003\",\n                            \"label\":\"用户修改\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1004\",\n                            \"label\":\"用户删除\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1005\",\n                            \"label\":\"用户导出\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1006\",\n                            \"label\":\"用户导入\",\n                            \"parentId\":\"100\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1007\",\n                            \"label\":\"重置密码\",\n                            \"parentId\":\"100\"\n                        }\n                    ],\n                    \"id\":\"100\",\n                    \"label\":\"用户管理\",\n                    \"parentId\":\"1\"\n                },\n                {\n                    \"children\":[\n                        {\n                            \"children\":[],\n                            \"id\":\"1008\",\n                            \"label\":\"角色查询\",\n                            \"parentId\":\"101\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1009\",\n                            \"label\":\"角色新增\",\n                            \"parentId\":\"101\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1010\",\n                            \"label\":\"角色修改\",\n                            \"parentId\":\"101\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1011\",\n                            \"label\":\"角色删除\",\n                            \"parentId\":\"101\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1012\",\n                            \"label\":\"角色导出\",\n                            \"parentId\":\"101\"\n                        }\n                    ],\n                    \"id\":\"101\",\n                    \"label\":\"角色管理\",\n                    \"parentId\":\"1\"\n                },\n                {\n                    \"children\":[\n                        {\n                            \"children\":[],\n                            \"id\":\"1013\",\n                            \"label\":\"菜单查询\",\n                            \"parentId\":\"102\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1014\",\n                            \"label\":\"菜单新增\",\n                            \"parentId\":\"102\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1015\",\n                            \"label\":\"菜单修改\",\n                            \"parentId\":\"102\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"1016\",\n                            \"label\":\"菜单删除\",\n                            \"parentId\":\"102\"\n                        }\n                    ],\n                    \"id\":\"102\",\n                    \"label\":\"菜单管理\",\n                    \"parentId\":\"1\"\n                }\n            ],\n            \"id\":\"1\",\n            \"label\":\"系统管理\",\n            \"parentId\":\"0\"\n        },\n        {\n            \"children\":[\n                {\n                    \"children\":[],\n                    \"id\":\"2019\",\n                    \"label\":\"文章管理\",\n                    \"parentId\":\"2017\"\n                },\n                {\n                    \"children\":[\n                        {\n                            \"children\":[],\n                            \"id\":\"2028\",\n                            \"label\":\"导出分类\",\n                            \"parentId\":\"2018\"\n                        }\n                    ],\n                    \"id\":\"2018\",\n                    \"label\":\"分类管理\",\n                    \"parentId\":\"2017\"\n                },\n                {\n                    \"children\":[\n                        {\n                            \"children\":[],\n                            \"id\":\"2024\",\n                            \"label\":\"友链新增\",\n                            \"parentId\":\"2022\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"2025\",\n                            \"label\":\"友链修改\",\n                            \"parentId\":\"2022\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"2026\",\n                            \"label\":\"友链删除\",\n                            \"parentId\":\"2022\"\n                        },\n                        {\n                            \"children\":[],\n                            \"id\":\"2027\",\n                            \"label\":\"友链查询\",\n                            \"parentId\":\"2022\"\n                        }\n                    ],\n                    \"id\":\"2022\",\n                    \"label\":\"友链管理\",\n                    \"parentId\":\"2017\"\n                },\n                {\n                    \"children\":[],\n                    \"id\":\"2021\",\n                    \"label\":\"标签管理\",\n                    \"parentId\":\"2017\"\n                }\n            ],\n            \"id\":\"2017\",\n            \"label\":\"内容管理\",\n            \"parentId\":\"0\"\n        }\n    ],\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n##### 5.20.2.2 新增角色接口\n\n\n\n| 请求方式 | 请求路径        | 是否需求token头 |\n| ---- | ----------- | ---------- |\n| POST | system/role | 是          |\n\n请求体：\n\n```json\n{\n    \"roleName\":\"测试新增角色\",\n    \"roleKey\":\"wds\",\n    \"roleSort\":0,\n    \"status\":\"0\",\n    \"menuIds\":[\n        \"1\",\n        \"100\"\n    ],\n    \"remark\":\"我是角色备注\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n\n\n### 5.21 修改角色\n\n#### 5.21.1 需求\n\n​    需要提供修改角色的功能。修改角色时可以修改角色所关联的菜单权限\n\n#### 5.21.2 接口设计\n\n##### 5.21.2.1 角色信息回显接口\n\n\n\n| 请求方式 | 请求路径             | 是否需求token头 |\n| ---- | ---------------- | ---------- |\n| Get  | system/role/{id} | 是          |\n\nPath格式请求参数：\n\nid: 角色id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"id\":\"11\",\n        \"remark\":\"嘎嘎嘎\",\n        \"roleKey\":\"aggag\",\n        \"roleName\":\"嘎嘎嘎\",\n        \"roleSort\":\"5\",\n        \"status\":\"0\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n##### 5.21.2.2 加载对应角色菜单列表树接口\n\n\n\n| 请求方式 | 请求路径                                 | 是否需求token头 |\n| ---- | ------------------------------------ | ---------- |\n| Get  | /system/menu/roleMenuTreeselect/{id} | 是          |\n\nPath格式请求参数：\n\nid: 角色id\n\n响应格式：\n\n字段介绍\n\n​    menus：菜单树。\n\n​    checkedKeys：角色所关联的菜单权限id列表。\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"menus\":[\n            {\n                \"children\":[],\n                \"id\":\"2023\",\n                \"label\":\"写博文\",\n                \"parentId\":\"0\"\n            },\n            {\n                \"children\":[\n                    {\n                        \"children\":[\n                            {\n                                \"children\":[],\n                                \"id\":\"1001\",\n                                \"label\":\"用户查询\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1002\",\n                                \"label\":\"用户新增\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1003\",\n                                \"label\":\"用户修改\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1004\",\n                                \"label\":\"用户删除\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1005\",\n                                \"label\":\"用户导出\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1006\",\n                                \"label\":\"用户导入\",\n                                \"parentId\":\"100\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1007\",\n                                \"label\":\"重置密码\",\n                                \"parentId\":\"100\"\n                            }\n                        ],\n                        \"id\":\"100\",\n                        \"label\":\"用户管理\",\n                        \"parentId\":\"1\"\n                    },\n                    {\n                        \"children\":[\n                            {\n                                \"children\":[],\n                                \"id\":\"1008\",\n                                \"label\":\"角色查询\",\n                                \"parentId\":\"101\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1009\",\n                                \"label\":\"角色新增\",\n                                \"parentId\":\"101\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1010\",\n                                \"label\":\"角色修改\",\n                                \"parentId\":\"101\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1011\",\n                                \"label\":\"角色删除\",\n                                \"parentId\":\"101\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1012\",\n                                \"label\":\"角色导出\",\n                                \"parentId\":\"101\"\n                            }\n                        ],\n                        \"id\":\"101\",\n                        \"label\":\"角色管理\",\n                        \"parentId\":\"1\"\n                    },\n                    {\n                        \"children\":[\n                            {\n                                \"children\":[],\n                                \"id\":\"1013\",\n                                \"label\":\"菜单查询\",\n                                \"parentId\":\"102\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1014\",\n                                \"label\":\"菜单新增\",\n                                \"parentId\":\"102\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1015\",\n                                \"label\":\"菜单修改\",\n                                \"parentId\":\"102\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"1016\",\n                                \"label\":\"菜单删除\",\n                                \"parentId\":\"102\"\n                            }\n                        ],\n                        \"id\":\"102\",\n                        \"label\":\"菜单管理\",\n                        \"parentId\":\"1\"\n                    }\n                ],\n                \"id\":\"1\",\n                \"label\":\"系统管理\",\n                \"parentId\":\"0\"\n            },\n            {\n                \"children\":[\n                    {\n                        \"children\":[],\n                        \"id\":\"2019\",\n                        \"label\":\"文章管理\",\n                        \"parentId\":\"2017\"\n                    },\n                    {\n                        \"children\":[\n                            {\n                                \"children\":[],\n                                \"id\":\"2028\",\n                                \"label\":\"导出分类\",\n                                \"parentId\":\"2018\"\n                            }\n                        ],\n                        \"id\":\"2018\",\n                        \"label\":\"分类管理\",\n                        \"parentId\":\"2017\"\n                    },\n                    {\n                        \"children\":[\n                            {\n                                \"children\":[],\n                                \"id\":\"2024\",\n                                \"label\":\"友链新增\",\n                                \"parentId\":\"2022\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"2025\",\n                                \"label\":\"友链修改\",\n                                \"parentId\":\"2022\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"2026\",\n                                \"label\":\"友链删除\",\n                                \"parentId\":\"2022\"\n                            },\n                            {\n                                \"children\":[],\n                                \"id\":\"2027\",\n                                \"label\":\"友链查询\",\n                                \"parentId\":\"2022\"\n                            }\n                        ],\n                        \"id\":\"2022\",\n                        \"label\":\"友链管理\",\n                        \"parentId\":\"2017\"\n                    },\n                    {\n                        \"children\":[],\n                        \"id\":\"2021\",\n                        \"label\":\"标签管理\",\n                        \"parentId\":\"2017\"\n                    }\n                ],\n                \"id\":\"2017\",\n                \"label\":\"内容管理\",\n                \"parentId\":\"0\"\n            }\n        ],\n        \"checkedKeys\":[\n            \"1001\"  \n        ]\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n##### 5.21.2.3 更新角色信息接口\n\n| 请求方式 | 请求路径        | 是否需求token头 |\n| ---- | ----------- | ---------- |\n| PUT  | system/role | 是          |\n\n请求体：\n\n```json\n{\n    \"id\":\"13\",\n    \"remark\":\"我是角色备注\",\n    \"roleKey\":\"wds\",\n    \"roleName\":\"测试新增角色\",\n    \"roleSort\":0,\n    \"status\":\"0\",\n    \"menuIds\":[\n        \"1\",\n        \"100\",\n        \"1001\"\n    ]\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n\n\n\n\n### 5.22 删除角色\n\n#### 5.22.1 需求\n\n​    删除固定的某个角色（逻辑删除）\n\n#### 5.22.2 接口设计\n\n​    \n\n| 请求方式   | 请求路径             | 是否需求token头 |\n| ------ | ---------------- | ---------- |\n| DELETE | system/role/{id} | 是          |\n\nPath请求参数：\n\nid：要删除的角色id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.23 用户列表\n\n#### 5.23.1 需求\n\n​    需要用户分页列表接口。\n\n​    可以根据用户名模糊搜索。\n\n​    可以进行手机号的搜索。\n\n​    可以进行状态的查询。\n\n#### 5.23.2 接口设计\n\n\n\n| 请求方式 | 请求路径             | 是否需求token头 |\n| ---- | ---------------- | ---------- |\n| GET  | system/user/list | 是          |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\nuserName：用户名\n\nphonenumber：手机号\n\nstatus:状态\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"avatar\":\"http://r7yxkqloa.bkt.clouddn.com/2022/03/05/75fd15587811443a9a9a771f24da458d.png\",\n                \"createTime\":\"2022-01-05 17:01:56\",\n                \"email\":\"23412332@qq.com\",\n                \"id\":\"1\",\n                \"nickName\":\"sg3334\",\n                \"phonenumber\":\"18888888888\",\n                \"sex\":\"1\",\n                \"status\":\"0\",\n                \"updateBy\":\"1\",\n                \"updateTime\":\"2022-03-13 21:36:22\",\n                \"userName\":\"sg\"\n            }\n        ],\n        \"total\":\"1\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.24 新增用户！！！\n\n\n\n#### 5.24.1 需求\n\n​    需要新增用户功能。新增用户时可以直接关联角色。\n\n​    注意：新增用户时注意密码加密存储。\n\n​    用户名不能为空，否则提示：必需填写用户名\n\n​    用户名必须之前未存在，否则提示：用户名已存在\n\n​    手机号必须之前未存在，否则提示：手机号已存在\n\n​    邮箱必须之前未存在，否则提示：邮箱已存在\n\n#### 5.24.2 接口设计\n\n##### 5.24.2.1 查询角色列表接口\n\n注意：查询的是所有状态正常的角色\n\n| 请求方式 | 请求路径                     | 是否需求token头 |\n| ---- | ------------------------ | ---------- |\n| GET  | /system/role/listAllRole | 是          |\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":[\n        {\n            \"createBy\":\"0\",\n            \"createTime\":\"2021-11-12 18:46:19\",\n            \"delFlag\":\"0\",\n            \"id\":\"1\",\n            \"remark\":\"超级管理员\",\n            \"roleKey\":\"admin\",\n            \"roleName\":\"超级管理员\",\n            \"roleSort\":\"1\",\n            \"status\":\"0\",\n            \"updateBy\":\"0\"\n        },\n        {\n            \"createBy\":\"0\",\n            \"createTime\":\"2021-11-12 18:46:19\",\n            \"delFlag\":\"0\",\n            \"id\":\"2\",\n            \"remark\":\"普通角色\",\n            \"roleKey\":\"common\",\n            \"roleName\":\"普通角色\",\n            \"roleSort\":\"2\",\n            \"status\":\"0\",\n            \"updateBy\":\"0\",\n            \"updateTime\":\"2022-01-02 06:32:58\"\n        },\n        {\n            \"createTime\":\"2022-01-06 22:07:40\",\n            \"delFlag\":\"0\",\n            \"id\":\"11\",\n            \"remark\":\"嘎嘎嘎\",\n            \"roleKey\":\"aggag\",\n            \"roleName\":\"嘎嘎嘎\",\n            \"roleSort\":\"5\",\n            \"status\":\"0\",\n            \"updateBy\":\"1\",\n            \"updateTime\":\"2022-09-12 10:00:25\"\n        },\n        {\n            \"createTime\":\"2022-01-16 14:49:30\",\n            \"delFlag\":\"0\",\n            \"id\":\"12\",\n            \"roleKey\":\"link\",\n            \"roleName\":\"友链审核员\",\n            \"roleSort\":\"1\",\n            \"status\":\"0\",\n            \"updateTime\":\"2022-01-16 16:05:09\"\n        }\n    ],\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n\n\n##### 5.24.2.2 新增用户\n\n| 请求方式 | 请求路径        | 是否需求token头 |\n| ---- | ----------- | ---------- |\n| POST | system/user | 是          |\n\n请求体：\n\n```json\n{\n    \"userName\":\"wqeree\",\n    \"nickName\":\"测试新增用户\",\n    \"password\":\"1234343\",\n    \"phonenumber\":\"18889778907\",\n    \"email\":\"233@sq.com\",\n    \"sex\":\"0\",\n    \"status\":\"0\",\n    \"roleIds\":[\n        \"2\"\n    ]\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.25 删除用户\n\n#### 5.25.1 需求\n\n删除固定的某个用户（逻辑删除）\n\n#### 5.25.2 接口设计\n\n不能删除当前操作的用户\n\n| 请求方式   | 请求路径              | 是否需求token头 |\n| ------ | ----------------- | ---------- |\n| DELETE | /system/user/{id} | 是          |\n\nPath请求参数：\n\nid：要删除的用户id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.26 修改用户\n\n#### 5.26.1 需求\n\n需要提供修改用户的功能。修改用户时可以修改用户所关联的角色。\n\n#### 5.26.2 接口设计\n\n##### 5.26.2.1 根据id查询用户信息回显接口\n\n\n\n| 请求方式 | 请求路径              | 是否需求token头 |\n| ---- | ----------------- | ---------- |\n| Get  | /system/user/{id} | 是          |\n\nPath格式请求参数：\n\nid: 用户id\n\n响应格式：\n\nroleIds：用户所关联的角色id列表\n\nroles：所有角色的列表\n\nuser：用户信息\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"roleIds\":[\n            \"11\"\n        ],\n        \"roles\":[\n            {\n                \"createBy\":\"0\",\n                \"createTime\":\"2021-11-12 18:46:19\",\n                \"delFlag\":\"0\",\n                \"id\":\"1\",\n                \"remark\":\"超级管理员\",\n                \"roleKey\":\"admin\",\n                \"roleName\":\"超级管理员\",\n                \"roleSort\":\"1\",\n                \"status\":\"0\",\n                \"updateBy\":\"0\"\n            },\n            {\n                \"createBy\":\"0\",\n                \"createTime\":\"2021-11-12 18:46:19\",\n                \"delFlag\":\"0\",\n                \"id\":\"2\",\n                \"remark\":\"普通角色\",\n                \"roleKey\":\"common\",\n                \"roleName\":\"普通角色\",\n                \"roleSort\":\"2\",\n                \"status\":\"0\",\n                \"updateBy\":\"0\",\n                \"updateTime\":\"2022-01-02 06:32:58\"\n            },\n            {\n                \"createTime\":\"2022-01-06 22:07:40\",\n                \"delFlag\":\"0\",\n                \"id\":\"11\",\n                \"remark\":\"嘎嘎嘎\",\n                \"roleKey\":\"aggag\",\n                \"roleName\":\"嘎嘎嘎\",\n                \"roleSort\":\"5\",\n                \"status\":\"0\",\n                \"updateBy\":\"1\",\n                \"updateTime\":\"2022-09-11 20:34:49\"\n            },\n            {\n                \"createTime\":\"2022-01-16 14:49:30\",\n                \"delFlag\":\"0\",\n                \"id\":\"12\",\n                \"roleKey\":\"link\",\n                \"roleName\":\"友链审核员\",\n                \"roleSort\":\"1\",\n                \"status\":\"0\",\n                \"updateTime\":\"2022-01-16 16:05:09\"\n            }\n        ],\n        \"user\":{\n            \"email\":\"weq@2132.com\",\n            \"id\":\"14787164048663\",\n            \"nickName\":\"sg777\",\n            \"sex\":\"0\",\n            \"status\":\"0\",\n            \"userName\":\"sg777\"\n        }\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n##### 5.26.2.2 更新用户信息接口\n\n\n\n| 请求方式 | 请求路径         | 是否需求token头 |\n| ---- | ------------ | ---------- |\n| PUT  | /system/user | 是          |\n\n请求体：\n\n```json\n{\n    \"email\":\"weq@2132.com\",\n    \"id\":\"14787164048663\",\n    \"nickName\":\"sg777\",\n    \"sex\":\"1\",\n    \"status\":\"0\",\n    \"userName\":\"sg777\",\n    \"roleIds\":[\n        \"11\"\n    ]\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.27 分页查询分类列表\n\n#### 5.27.1 需求\n\n​    需要分页查询分类列表。\n\n​    能根据分类名称进行模糊查询。\n\n​    能根据状态进行查询。\n\n#### 5.27.2 接口设计\n\n\n\n| 请求方式 | 请求路径                  | 是否需求token头 |\n| ---- | --------------------- | ---------- |\n| GET  | content/category/list | 是          |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\nname：分类名\n\nstatus: 状态\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"description\":\"wsd\",\n                \"id\":\"1\",\n                \"name\":\"java\",\n                \"status\":\"0\"\n            },\n            {\n                \"description\":\"wsd\",\n                \"id\":\"2\",\n                \"name\":\"PHP\",\n                \"status\":\"0\"\n            }\n        ],\n        \"total\":\"2\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.28 新增分类\n\n#### 5.28.1 需求\n\n​    需要新增分类功能\n\n#### 5.28.2 接口设计\n\n\n\n| 请求方式 | 请求路径              | 是否需求token头 |\n| ---- | ----------------- | ---------- |\n| POST | /content/category | 是          |\n\n请求体：\n\n```json\n{\n    \"name\":\"威威\",\n    \"description\":\"是的\",\n    \"status\":\"0\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.29 修改分类\n\n#### 5.29.1 需求\n\n​    需要提供修改分类的功能\n\n#### 5.29.2 接口设计\n\n##### 5.29.2.1 根据id查询分类\n\n\n\n| 请求方式 | 请求路径                  | 是否需求token头 |\n| ---- | --------------------- | ---------- |\n| Get  | content/category/{id} | 是          |\n\nPath格式请求参数：\n\nid: 分类id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"description\":\"qwew\",\n        \"id\":\"4\",\n        \"name\":\"ww\",\n        \"status\":\"0\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n##### 5.29.2.2 更新分类\n\n| 请求方式 | 请求路径              | 是否需求token头 |\n| ---- | ----------------- | ---------- |\n| PUT  | /content/category | 是          |\n\n请求体：\n\n```json\n{\n    \"description\":\"是的\",\n    \"id\":\"3\",\n    \"name\":\"威威2\",\n    \"status\":\"0\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.30 删除分类\n\n#### 5.30.1 需求\n\n​    删除某个分类（逻辑删除）\n\n#### 5.30.2 接口设计\n\n\n\n| 请求方式   | 请求路径                   | 是否需求token头 |\n| ------ | ---------------------- | ---------- |\n| DELETE | /content/category/{id} | 是          |\n\nPath请求参数：\n\nid：要删除的分类id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n### 5.31 分页查询友链列表\n\n#### 5.31.1 需求\n\n​    需要分页查询友链列表。\n\n​    能根据友链名称进行模糊查询。\n\n​    能根据状态进行查询。\n\n#### 5.31.2 接口设计\n\n\n\n| 请求方式 | 请求路径               | 是否需求token头 |\n| ---- | ------------------ | ---------- |\n| GET  | /content/link/list | 是          |\n\nQuery格式请求参数：\n\npageNum: 页码\n\npageSize: 每页条数\n\nname：友链名\n\nstatus:状态\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"rows\":[\n            {\n                \"address\":\"https://www.baidu.com\",\n                \"description\":\"sda\",\n                \"id\":\"1\",                               \"logo\":\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Frecom%2F2016%2F05%2F10%2F146286696706220328.PNG&refer=http%3A%2F%2Fn1.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1646205529&t=f942665181eb9b0685db7a6f59d59975\",\n                \"name\":\"sda\",\n                \"status\":\"0\"\n            }\n        ],\n        \"total\":\"1\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.32 新增友链\n\n#### 5.32.1 需求\n\n​    需要新增友链功能\n\n#### 5.32.2 接口设计\n\n\n\n| 请求方式 | 请求路径          | 是否需求token头 |\n| ---- | ------------- | ---------- |\n| POST | /content/link | 是          |\n\n请求体：\n\n```json\n{\n    \"name\":\"sda\",\n    \"description\":\"weqw\",\n    \"address\":\"wewe\",\n    \"logo\":\"weqe\",\n    \"status\":\"2\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.33 修改友链\n\n#### 5.33.1 需求\n\n​    需要提供修改友链的功能\n\n#### 5.33.2 接口设计\n\n##### 5.33.2.1 根据id查询友联\n\n\n\n| 请求方式 | 请求路径              | 是否需求token头 |\n| ---- | ----------------- | ---------- |\n| Get  | content/link/{id} | 是          |\n\nPath格式请求参数：\n\nid: 友链id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"data\":{\n        \"address\":\"wewe\",\n        \"description\":\"weqw\",\n        \"id\":\"4\",\n        \"logo\":\"weqe\",\n        \"name\":\"sda\",\n        \"status\":\"2\"\n    },\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n\n\n##### 5.33.2.2 修改友链\n\n| 请求方式 | 请求路径          | 是否需求token头 |\n| ---- | ------------- | ---------- |\n| PUT  | /content/link | 是          |\n\n请求体：\n\n```json\n{\n    \"address\":\"https://www.qq.com\",\n    \"description\":\"dada2\",\n    \"id\":\"2\",\n    \"logo\":\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Frecom%2F2016%2F05%2F10%2F146286696706220328.PNG&refer=http%3A%2F%2Fn1.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1646205529&t=f942665181eb9b0685db7a6f59d59975\",\n    \"name\":\"sda\",\n    \"status\":\"0\"\n}\n```\n\n\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n\n\n\n### 5.34 删除友链\n\n#### 5.34.1 需求\n\n​    删除某个友链（逻辑删除）\n\n#### 5.34.2 接口设计\n\n\n\n| 请求方式   | 请求路径               | 是否需求token头 |\n| ------ | ------------------ | ---------- |\n| DELETE | /content/link/{id} | 是          |\n\nPath请求参数：\n\nid：要删除的友链id\n\n响应格式：\n\n```json\n{\n    \"code\":200,\n    \"msg\":\"操作成功\"\n}\n```\n', '主流技术栈（SpringBoot,MybatisPlus,SpringSecurity,EasyExcel,Swagger2,Redis,Echarts,Vue,ElementUI....）', 1, '', '1', '0', 50, '1', NULL, '2023-09-24 19:38:00', NULL, NULL, 1);
INSERT INTO `sg_article` VALUES (13, 'test11', '1234![天气之子.jpg](http://s21taor9o.bkt.clouddn.com/2023/10/28/bdf4324cc90d4958afb00ce27226a598.jpg)', 'asd', 1, 'http://s21taor9o.bkt.clouddn.com/2023/10/28/fd05a43871934acf88072b164112ecaf.jpg', '0', '1', 0, '1', 1, '2023-10-28 09:13:42', 1, '2023-10-28 11:01:23', 1);
INSERT INTO `sg_article` VALUES (14, 'test222', '1234![天气之子.jpg](http://s21taor9o.bkt.clouddn.com/2023/10/28/bdf4324cc90d4958afb00ce27226a598.jpg)', '我是文章修改测试', 1, 'http://s21taor9o.bkt.clouddn.com/2023/10/28/d41aa2891d9c44768a736dab9d73937b.jpg', '0', '0', 0, '0', 1, '2023-10-28 09:13:45', 1, '2023-10-28 10:54:50', 1);
INSERT INTO `sg_article` VALUES (15, '测试3', '测试3', '测试3', 1, '', '1', '1', 0, '0', 1, '2023-10-28 10:47:03', 1, '2023-10-28 10:54:47', 1);
INSERT INTO `sg_article` VALUES (16, 'WebScoket', 'WebScoket\n\n*查阅了一些资料，站在前人的肩膀上看世界会很美好。*\n\n参考 [TCP长连接和短连接-深入浅出（还在总说http长连接吗）](https://blog.csdn.net/yeahPeng11/article/details/122419705)\n\n理论参考: [全面理解WebSocket与Socket、TCP、HTTP的关系及区别_tcp和websocket区别](https://blog.csdn.net/aiwokache/article/details/117294920)\n\n[springboot整合webSocket（看完即入门](https://zhuanlan.zhihu.com/p/613527997)\n\n## 什么是长连接和短连接\n\n**1.官方解释**\n\n**长连接(long connnection)**, 指在一个连接上可以连续发送多个数据包，在连接保持期间，如果没有数据包发送，需要双方发链路检测包。\n\n**短连接(short connnection)**, 是相对于长连接而言的概念，指的是在数据传送过程中，只在需要发送数据时才去建立一个连接，数据发送完成后则断开此连接，即每次连接只完成一项业务的发送。\n\n**2.通俗一点**\n\n**长连接**：连接->传输数据->保持连接 -> 传输数据-> …->直到一方关闭连接，客户端关闭连接。长连接指建立SOCKET连接后无论使用与否都要保持连接。\n\n**短连接**：连接->传输数据->关闭连接。下次一次需要传输数据需要再次连接。\n\n下图对比帮助理解（当然，连接和响应的具体流程需要看对应的通信协议）：\n\n![长连接和短连接](https://img-blog.csdnimg.cn/d3f6f5d6b88442eb82081dc0f2db757d.png)\n\n**3.应用场景**\n\n**长连接**多用于操作频繁，点对点的通讯，而且连接数不能太多情况。像TCP每次连接前需要进行三次握手，频繁连接会降低效率。<br>**例如：**数据库的连接使用长连接，如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。\n\n而像WEB网站的http服务一般都用**短链接**，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。<br>所以并发量大，但每个用户无需频繁操作情况下需用短连好。\n\n* * *\n\n## 什么是WebScoket\n\n**1.介绍**\n\n​ WebSocket是一种在单个TCP连接上进行*<u>全双工通信</u>*的协议。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。<br>**原理：**WebSocket 同 HTTP 一样也是应用层的协议，但是它是一种双向通信协议，是建立在 TCP 之上的。\n\n![WebScoket](https://pic3.zhimg.com/80/v2-39f66bc06fd93c645fca1eee6e2138c6_720w.webp)\n\n**注:什么是单工、半双工、全工通信？**\n\n* 数据只能单向传送为单工;\n* 数据能双向传送但不能同时双向传送称为半双工；\n* 数据能够同时双向传送则称为全双工。\n\n* * *\n\n## WebSocet和Socket的区别\n\n**Socket** 其实并不是一个协议，而是应用层与TCP/IP协议族通信的中间软件抽象层，是为了方便使用 TCP 或 UDP 而抽象出来的一层。Socket是对TCP/IP协议的封装，是位于应用层和传输控制层之间的一组**接口**。它工作在OSI模型会话层，是一个套接字，TCP/IP网络的API，是为了方便大家直接使用。\n\n**Websocket**：同HTTP一样也是应用层的**协议**，但是它是一种双向通信协议，是建立在TCP之上的，解决了服务器与客户端全双工通信的问题，包含两部分:一部分是“握手”，一部分是“数据传输”。握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。\n\n**标准的七层模型，即OSI（Open System Interconnection）参考模型：**\n\n![OSI七层模型](https://img-blog.csdnimg.cn/img_convert/fa6f56cbf10fc8107dccd168b0c8707e.png)<br>简化的TCP/IP四层模型主要分为:应用层、传输层、网络层、数据链路层。', '这是一篇WebScoket入门文章，介绍了WebScoket以及如何在java中使用他。我们的目标是利用WebScoket实现在线聊天室', 1, 'http://s6nwxxpsb.hd-bkt.clouddn.com/2024/01/04/87265fccfafa47c9aa4f2f6267101e06.jpg', '1', '0', 126, '0', 1, '2024-01-04 11:01:16', 1, '2024-01-04 11:01:16', 0);

-- ----------------------------
-- Table structure for sg_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `sg_article_tag`;
CREATE TABLE `sg_article_tag`  (
  `article_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `tag_id` bigint(20) NOT NULL DEFAULT 0 COMMENT '标签id',
  PRIMARY KEY (`article_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '文章标签关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_article_tag
-- ----------------------------
INSERT INTO `sg_article_tag` VALUES (1, 4);
INSERT INTO `sg_article_tag` VALUES (2, 1);
INSERT INTO `sg_article_tag` VALUES (2, 4);
INSERT INTO `sg_article_tag` VALUES (3, 4);
INSERT INTO `sg_article_tag` VALUES (3, 5);
INSERT INTO `sg_article_tag` VALUES (16, 4);

-- ----------------------------
-- Table structure for sg_category
-- ----------------------------
DROP TABLE IF EXISTS `sg_category`;
CREATE TABLE `sg_category`  (
  `id` bigint(200) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '分类名',
  `pid` bigint(200) NULL DEFAULT -1 COMMENT '父分类id，如果没有父分类为-1',
  `description` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态0:正常,1禁用',
  `create_by` bigint(200) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(200) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '分类表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_category
-- ----------------------------
INSERT INTO `sg_category` VALUES (1, 'java', -1, 'wsd', '0', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sg_category` VALUES (2, 'PHP', -1, 'wsd', '0', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sg_category` VALUES (15, 'test12', -1, '分类测试12', '1', 1, '2024-01-25 11:49:07', 1, '2024-01-25 11:53:11', 1);
INSERT INTO `sg_category` VALUES (16, 'test2', -1, '分类测试2', '1', 1, '2024-01-25 11:49:33', 1, '2024-01-25 11:53:17', 1);
INSERT INTO `sg_category` VALUES (17, 'test3', -1, '分类测试3', '0', 1, '2024-01-25 11:49:48', 1, '2024-01-25 11:53:17', 1);
INSERT INTO `sg_category` VALUES (18, 'test4', -1, '分类测试4', '0', 1, '2024-01-25 14:04:10', 1, '2024-01-25 14:04:13', 1);

-- ----------------------------
-- Table structure for sg_comment
-- ----------------------------
DROP TABLE IF EXISTS `sg_comment`;
CREATE TABLE `sg_comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '评论类型（0代表文章评论，1代表友链评论）',
  `article_id` bigint(20) NULL DEFAULT NULL COMMENT '文章id',
  `root_id` bigint(20) NULL DEFAULT -1 COMMENT '根评论id',
  `content` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论内容',
  `to_comment_user_id` bigint(20) NULL DEFAULT -1 COMMENT '所回复的目标评论的userid',
  `to_comment_id` bigint(20) NULL DEFAULT -1 COMMENT '回复目标评论id',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 44 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '评论表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_comment
-- ----------------------------
INSERT INTO `sg_comment` VALUES (1, '0', 1, -1, 'asS', -1, -1, 1, '2022-01-29 07:59:22', 1, '2022-01-29 07:59:22', 0);
INSERT INTO `sg_comment` VALUES (2, '0', 1, -1, '[哈哈]SDAS', -1, -1, 1, '2022-01-29 08:01:24', 1, '2022-01-29 08:01:24', 0);
INSERT INTO `sg_comment` VALUES (3, '0', 1, -1, '是大多数', -1, -1, 1, '2022-01-29 16:07:24', 1, '2022-01-29 16:07:24', 0);
INSERT INTO `sg_comment` VALUES (4, '0', 1, -1, '撒大声地', -1, -1, 1, '2022-01-29 16:12:09', 1, '2022-01-29 16:12:09', 0);
INSERT INTO `sg_comment` VALUES (5, '0', 1, -1, '你再说什么', -1, -1, 1, '2022-01-29 18:19:56', 1, '2022-01-29 18:19:56', 0);
INSERT INTO `sg_comment` VALUES (6, '0', 1, -1, 'hffd', -1, -1, 1, '2022-01-29 22:13:52', 1, '2022-01-29 22:13:52', 0);
INSERT INTO `sg_comment` VALUES (9, '0', 1, 2, '你说什么', 1, 2, 1, '2022-01-29 22:18:40', 1, '2022-01-29 22:18:40', 0);
INSERT INTO `sg_comment` VALUES (10, '0', 1, 2, '哈哈哈哈[哈哈]', 1, 9, 1, '2022-01-29 22:29:15', 1, '2022-01-29 22:29:15', 0);
INSERT INTO `sg_comment` VALUES (11, '0', 1, 2, 'we全文', 1, 10, 3, '2022-01-29 22:29:55', 1, '2022-01-29 22:29:55', 0);
INSERT INTO `sg_comment` VALUES (12, '0', 1, -1, '王企鹅', -1, -1, 1, '2022-01-29 22:30:20', 1, '2022-01-29 22:30:20', 0);
INSERT INTO `sg_comment` VALUES (13, '0', 1, -1, '什么阿是', -1, -1, 1, '2022-01-29 22:30:56', 1, '2022-01-29 22:30:56', 0);
INSERT INTO `sg_comment` VALUES (14, '0', 1, -1, '新平顶山', -1, -1, 1, '2022-01-29 22:32:51', 1, '2022-01-29 22:32:51', 0);
INSERT INTO `sg_comment` VALUES (15, '0', 1, -1, '2222', -1, -1, 1, '2022-01-29 22:34:38', 1, '2022-01-29 22:34:38', 0);
INSERT INTO `sg_comment` VALUES (16, '0', 1, 2, '3333', 1, 11, 1, '2022-01-29 22:34:47', 1, '2022-01-29 22:34:47', 0);
INSERT INTO `sg_comment` VALUES (17, '0', 1, 2, '回复weqedadsd', 3, 11, 1, '2022-01-29 22:38:00', 1, '2022-01-29 22:38:00', 0);
INSERT INTO `sg_comment` VALUES (18, '0', 1, -1, 'sdasd', -1, -1, 1, '2022-01-29 23:18:19', 1, '2022-01-29 23:18:19', 0);
INSERT INTO `sg_comment` VALUES (19, '0', 1, -1, '111', -1, -1, 1, '2022-01-29 23:22:23', 1, '2022-01-29 23:22:23', 0);
INSERT INTO `sg_comment` VALUES (20, '0', 1, 1, '你说啥？', 1, 1, 1, '2022-01-30 10:06:21', 1, '2022-01-30 10:06:21', 0);
INSERT INTO `sg_comment` VALUES (21, '0', 1, -1, '友链添加个呗', -1, -1, 1, '2022-01-30 10:06:50', 1, '2022-01-30 10:06:50', 0);
INSERT INTO `sg_comment` VALUES (22, '1', 1, -1, '友链评论2', -1, -1, 1, '2022-01-30 10:08:28', 1, '2022-01-30 10:08:28', 0);
INSERT INTO `sg_comment` VALUES (23, '1', 1, 22, '回复友链评论3', 1, 22, 1, '2022-01-30 10:08:50', 1, '2022-01-30 10:08:50', 0);
INSERT INTO `sg_comment` VALUES (24, '1', 1, -1, '友链评论4444', -1, -1, 1, '2022-01-30 10:09:03', 1, '2022-01-30 10:09:03', 0);
INSERT INTO `sg_comment` VALUES (25, '1', 1, 22, '收到的', 1, 22, 1, '2022-01-30 10:13:28', 1, '2022-01-30 10:13:28', 0);
INSERT INTO `sg_comment` VALUES (26, '0', 1, -1, 'sda', -1, -1, 1, '2022-01-30 10:39:05', 1, '2022-01-30 10:39:05', 0);
INSERT INTO `sg_comment` VALUES (27, '0', 1, 1, '说你咋地', 1, 20, 14787164048662, '2022-01-30 17:19:30', 14787164048662, '2022-01-30 17:19:30', 0);
INSERT INTO `sg_comment` VALUES (28, '0', 1, 1, 'sdad', 1, 1, 14787164048662, '2022-01-31 11:11:20', 14787164048662, '2022-01-31 11:11:20', 0);
INSERT INTO `sg_comment` VALUES (29, '0', 1, -1, '你说是的ad', -1, -1, 14787164048662, '2022-01-31 14:10:11', 14787164048662, '2022-01-31 14:10:11', 0);
INSERT INTO `sg_comment` VALUES (30, '0', 1, 1, '撒大声地', 1, 1, 14787164048662, '2022-01-31 20:19:18', 14787164048662, '2022-01-31 20:19:18', 0);
INSERT INTO `sg_comment` VALUES (31, '0', 1, -1, '根评论测试[可爱]', -1, -1, 1, '2023-10-04 20:37:55', 1, '2023-10-04 20:37:55', 0);
INSERT INTO `sg_comment` VALUES (32, '0', 1, 31, '子评论测试', 1, 31, 1, '2023-10-04 20:42:42', 1, '2023-10-04 20:42:42', 0);
INSERT INTO `sg_comment` VALUES (33, '1', 1, -1, '友链评论测试[抱抱]', -1, -1, 1, '2023-10-05 14:39:38', 1, '2023-10-05 14:39:38', 0);
INSERT INTO `sg_comment` VALUES (34, '1', 1, 33, '友链子评论测试[可怜]', 1, 33, 1, '2023-10-05 14:39:52', 1, '2023-10-05 14:39:52', 0);
INSERT INTO `sg_comment` VALUES (35, '0', 1, 1, 'asdf[微笑]', 1, 20, 1, '2023-10-22 15:49:15', 1, '2023-10-22 15:49:15', 0);
INSERT INTO `sg_comment` VALUES (36, '0', 1, -1, '测试[衰][衰]', -1, -1, 1, '2024-01-02 22:43:07', 1, '2024-01-02 22:43:07', 0);
INSERT INTO `sg_comment` VALUES (37, '0', 1, -1, '打包后测试1[哈哈][哈哈]', -1, -1, 14787164048665, '2024-01-03 14:26:46', 14787164048665, '2024-01-03 14:26:46', 0);
INSERT INTO `sg_comment` VALUES (38, '1', 1, -1, '我喜欢这个[太开心][太开心]', -1, -1, 14787164048665, '2024-01-04 15:21:40', 14787164048665, '2024-01-04 15:21:40', 0);
INSERT INTO `sg_comment` VALUES (39, '0', 16, -1, '我也想上传文章，可以吗？', -1, -1, 14787164048665, '2024-01-04 15:23:26', 14787164048665, '2024-01-04 15:23:26', 0);
INSERT INTO `sg_comment` VALUES (40, '0', 16, 39, '发文章功能在后台系统哦[心]', 14787164048665, 39, 1, '2024-01-04 15:26:40', 1, '2024-01-04 15:26:40', 0);
INSERT INTO `sg_comment` VALUES (43, '0', 16, 39, '好的[心]', 1, 40, 14787164048665, '2024-01-04 17:17:07', 14787164048665, '2024-01-04 17:17:07', 0);

-- ----------------------------
-- Table structure for sg_link
-- ----------------------------
DROP TABLE IF EXISTS `sg_link`;
CREATE TABLE `sg_link`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `logo` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `description` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `address` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站地址',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '2' COMMENT '审核状态 (0代表审核通过，1代表审核未通过，2代表未审核)',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '友链' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_link
-- ----------------------------
INSERT INTO `sg_link` VALUES (1, '百度', 'https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Frecom%2F2016%2F05%2F10%2F146286696706220328.PNG&refer=http%3A%2F%2Fn1.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1646205529&t=f942665181eb9b0685db7a6f59d59975', '百度一下，你就知道', 'https://www.baidu.com', '0', NULL, '2022-01-13 08:25:47', NULL, '2022-01-13 08:36:14', 0);
INSERT INTO `sg_link` VALUES (2, 'ChatGPT', 'http://s6nwxxpsb.hd-bkt.clouddn.com/2024/01/04/ChatGPT.png', 'How are you today？', 'https://chat.openai.com/', '0', NULL, '2022-01-13 09:06:10', NULL, '2022-01-13 09:07:09', 0);
INSERT INTO `sg_link` VALUES (3, 'Github', 'http://s6nwxxpsb.hd-bkt.clouddn.com/2024/01/04/github.jpg', 'let me can can', 'https://github.com/', '0', NULL, '2022-01-13 09:23:01', NULL, '2022-01-13 09:23:01', 0);
INSERT INTO `sg_link` VALUES (4, 'test1', '1', '友链测试1', '1', '2', NULL, NULL, NULL, NULL, 1);
INSERT INTO `sg_link` VALUES (5, 'test22', '2', '友链测试22', '2', '0', NULL, NULL, NULL, NULL, 1);
INSERT INTO `sg_link` VALUES (6, 'test3', '3', '友链测试3', '3', '0', NULL, NULL, NULL, NULL, 1);

-- ----------------------------
-- Table structure for sg_tag
-- ----------------------------
DROP TABLE IF EXISTS `sg_tag`;
CREATE TABLE `sg_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签名',
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '标签' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sg_tag
-- ----------------------------
INSERT INTO `sg_tag` VALUES (1, 'Mybatis', NULL, NULL, 1, '2024-01-16 19:56:39', 0, '持久化框架');
INSERT INTO `sg_tag` VALUES (2, 'asdas', NULL, '2022-01-11 09:20:55', NULL, '2022-01-11 09:20:55', 1, 'weqw');
INSERT INTO `sg_tag` VALUES (3, 'weqw', NULL, '2022-01-11 09:21:07', NULL, '2022-01-11 09:21:07', 1, 'qweqwe');
INSERT INTO `sg_tag` VALUES (4, 'Java', NULL, '2022-01-13 15:22:43', 1, '2023-10-23 15:57:13', 0, '狗都不学');
INSERT INTO `sg_tag` VALUES (5, 'WAD', NULL, '2022-01-13 15:22:47', 1, '2023-10-23 15:19:16', 1, 'ASDAD');
INSERT INTO `sg_tag` VALUES (6, 'c#', 1, '2023-10-23 15:06:47', 1, '2023-10-23 15:06:47', 0, 'c++++');
INSERT INTO `sg_tag` VALUES (7, 'MybatisPlus', 1, '2023-10-23 15:07:53', 1, '2024-01-16 19:56:53', 0, 'Plus！');
INSERT INTO `sg_tag` VALUES (8, 'test', 1, '2023-10-28 09:08:51', 1, '2023-10-28 09:09:03', 1, '222');

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '菜单ID',
  `menu_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '菜单名称',
  `parent_id` bigint(20) NULL DEFAULT 0 COMMENT '父菜单ID',
  `order_num` int(4) NULL DEFAULT 0 COMMENT '显示顺序',
  `path` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '路由地址',
  `component` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '组件路径',
  `is_frame` int(1) NULL DEFAULT 1 COMMENT '是否为外链（0是 1否）',
  `menu_type` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '菜单类型（M目录 C菜单 F按钮）',
  `visible` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0显示 1隐藏）',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0正常 1停用）',
  `perms` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限标识',
  `icon` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '#' COMMENT '菜单图标',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '备注',
  `del_flag` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2037 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '菜单权限表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES (1, '系统管理', 0, 1, 'system', NULL, 1, 'M', '0', '0', '', 'system', 0, '2021-11-12 10:46:19', 0, NULL, '系统管理目录', '0');
INSERT INTO `sys_menu` VALUES (100, '用户管理', 1, 1, 'user', 'system/user/index', 1, 'C', '0', '0', 'system:user:list', 'user', 0, '2021-11-12 10:46:19', 1, '2022-07-31 15:47:58', '用户管理菜单', '0');
INSERT INTO `sys_menu` VALUES (101, '角色管理', 1, 2, 'role', 'system/role/index', 1, 'C', '0', '0', 'system:role:list', 'peoples', 0, '2021-11-12 10:46:19', 0, NULL, '角色管理菜单', '0');
INSERT INTO `sys_menu` VALUES (102, '菜单管理', 1, 3, 'menu', 'system/menu/index', 1, 'C', '0', '0', 'system:menu:list', 'tree-table', 0, '2021-11-12 10:46:19', 0, NULL, '菜单管理菜单', '0');
INSERT INTO `sys_menu` VALUES (1001, '用户查询', 100, 1, '', '', 1, 'F', '0', '0', 'system:user:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1002, '用户新增', 100, 2, '', '', 1, 'F', '0', '0', 'system:user:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1003, '用户修改', 100, 3, '', '', 1, 'F', '0', '0', 'system:user:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1004, '用户删除', 100, 4, '', '', 1, 'F', '0', '0', 'system:user:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1005, '用户导出', 100, 5, '', '', 1, 'F', '0', '0', 'system:user:export', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1006, '用户导入', 100, 6, '', '', 1, 'F', '0', '0', 'system:user:import', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1007, '重置密码', 100, 7, '', '', 1, 'F', '0', '0', 'system:user:resetPwd', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1008, '角色查询', 101, 1, '', '', 1, 'F', '0', '0', 'system:role:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1009, '角色新增', 101, 2, '', '', 1, 'F', '0', '0', 'system:role:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1010, '角色修改', 101, 3, '', '', 1, 'F', '0', '0', 'system:role:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1011, '角色删除', 101, 4, '', '', 1, 'F', '0', '0', 'system:role:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1012, '角色导出', 101, 5, '', '', 1, 'F', '0', '0', 'system:role:export', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1013, '菜单查询', 102, 1, '', '', 1, 'F', '0', '0', 'system:menu:query', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1014, '菜单新增', 102, 2, '', '', 1, 'F', '0', '0', 'system:menu:add', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1015, '菜单修改', 102, 3, '', '', 1, 'F', '0', '0', 'system:menu:edit', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (1016, '菜单删除', 102, 4, '', '', 1, 'F', '0', '0', 'system:menu:remove', '#', 0, '2021-11-12 10:46:19', 0, NULL, '', '0');
INSERT INTO `sys_menu` VALUES (2017, '内容管理', 0, 4, 'content', NULL, 1, 'M', '0', '0', NULL, 'table', NULL, '2022-01-08 02:44:38', 1, '2022-07-31 12:34:23', '', '0');
INSERT INTO `sys_menu` VALUES (2018, '分类管理', 2017, 1, 'category', 'content/category/index', 1, 'C', '0', '0', 'content:category:list', 'example', NULL, '2022-01-08 02:51:45', NULL, '2022-01-08 02:51:45', '', '0');
INSERT INTO `sys_menu` VALUES (2019, '文章管理', 2017, 0, 'article', 'content/article/index', 1, 'C', '0', '0', 'content:article:list', 'build', NULL, '2022-01-08 02:53:10', NULL, '2022-01-08 02:53:10', '', '0');
INSERT INTO `sys_menu` VALUES (2021, '标签管理', 2017, 6, 'tag', 'content/tag/index', 1, 'C', '0', '0', 'content:tag:index', 'button', NULL, '2022-01-08 02:55:37', NULL, '2022-01-08 02:55:50', '', '0');
INSERT INTO `sys_menu` VALUES (2022, '友链管理', 2017, 4, 'link', 'content/link/index', 1, 'C', '0', '0', 'content:link:list', '404', NULL, '2022-01-08 02:56:50', NULL, '2022-01-08 02:56:50', '', '0');
INSERT INTO `sys_menu` VALUES (2023, '写博文', 0, 0, 'write', 'content/article/write/index', 1, 'C', '0', '0', 'content:article:writer', 'build', NULL, '2022-01-08 03:39:58', 1, '2022-07-31 22:07:05', '', '0');
INSERT INTO `sys_menu` VALUES (2024, '友链新增', 2022, 0, '', NULL, 1, 'F', '0', '0', 'content:link:add', '#', NULL, '2022-01-16 07:59:17', NULL, '2022-01-16 07:59:17', '', '0');
INSERT INTO `sys_menu` VALUES (2025, '友链修改', 2022, 1, '', NULL, 1, 'F', '0', '0', 'content:link:edit', '#', NULL, '2022-01-16 07:59:44', NULL, '2022-01-16 07:59:44', '', '0');
INSERT INTO `sys_menu` VALUES (2026, '友链删除', 2022, 1, '', NULL, 1, 'F', '0', '0', 'content:link:remove', '#', NULL, '2022-01-16 08:00:05', NULL, '2022-01-16 08:00:05', '', '0');
INSERT INTO `sys_menu` VALUES (2027, '友链查询', 2022, 2, '', NULL, 1, 'F', '0', '0', 'content:link:query', '#', NULL, '2022-01-16 08:04:09', NULL, '2022-01-16 08:04:09', '', '0');
INSERT INTO `sys_menu` VALUES (2028, '导出分类', 2018, 1, '', NULL, 1, 'F', '0', '0', 'content:category:export', '#', NULL, '2022-01-21 07:06:59', NULL, '2022-01-21 07:06:59', '', '0');
INSERT INTO `sys_menu` VALUES (2035, '测试test', 2023, 3, '测试test', NULL, 1, 'M', '1', '0', NULL, 'dict', 1, '2023-10-28 16:38:35', 1, '2023-10-28 16:53:31', '', '1');
INSERT INTO `sys_menu` VALUES (2036, 'inner', 2035, 2, 'test', NULL, 1, 'M', '0', '0', NULL, 'build', 1, '2023-10-28 16:52:34', 1, '2023-10-28 16:54:25', '', '1');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `role_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色名称',
  `role_key` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色权限字符串',
  `role_sort` int(4) NOT NULL COMMENT '显示顺序',
  `status` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色状态（0正常 1停用）',
  `del_flag` char(1) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '删除标志（0代表存在 1代表删除）',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, '超级管理员', 'admin', 1, '0', '0', 0, '2021-11-12 10:46:19', 0, NULL, '超级管理员');
INSERT INTO `sys_role` VALUES (2, '普通角色', 'common', 2, '0', '0', 0, '2021-11-12 10:46:19', 0, '2022-01-01 22:32:58', '普通角色');
INSERT INTO `sys_role` VALUES (11, '嘎嘎嘎', 'aggag', 6, '0', '0', NULL, '2022-01-06 14:07:40', 1, '2024-01-20 14:28:43', '嘎嘎嘎');
INSERT INTO `sys_role` VALUES (12, '友链审核员', 'link', 1, '0', '0', NULL, '2022-01-16 06:49:30', NULL, '2022-01-16 08:05:09', NULL);
INSERT INTO `sys_role` VALUES (14, '测试新增角色', 'updateTest', 0, '0', '1', 1, '2023-11-18 17:17:46', 1, '2023-11-18 19:51:25', '我是角色备注');

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  `menu_id` bigint(20) NOT NULL COMMENT '菜单ID',
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色和菜单关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES (0, 0);
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (2, 102);
INSERT INTO `sys_role_menu` VALUES (2, 1013);
INSERT INTO `sys_role_menu` VALUES (2, 1014);
INSERT INTO `sys_role_menu` VALUES (2, 1015);
INSERT INTO `sys_role_menu` VALUES (2, 1016);
INSERT INTO `sys_role_menu` VALUES (3, 2);
INSERT INTO `sys_role_menu` VALUES (3, 3);
INSERT INTO `sys_role_menu` VALUES (3, 4);
INSERT INTO `sys_role_menu` VALUES (3, 100);
INSERT INTO `sys_role_menu` VALUES (3, 101);
INSERT INTO `sys_role_menu` VALUES (3, 103);
INSERT INTO `sys_role_menu` VALUES (3, 104);
INSERT INTO `sys_role_menu` VALUES (3, 105);
INSERT INTO `sys_role_menu` VALUES (3, 106);
INSERT INTO `sys_role_menu` VALUES (3, 107);
INSERT INTO `sys_role_menu` VALUES (3, 108);
INSERT INTO `sys_role_menu` VALUES (3, 109);
INSERT INTO `sys_role_menu` VALUES (3, 110);
INSERT INTO `sys_role_menu` VALUES (3, 111);
INSERT INTO `sys_role_menu` VALUES (3, 112);
INSERT INTO `sys_role_menu` VALUES (3, 113);
INSERT INTO `sys_role_menu` VALUES (3, 114);
INSERT INTO `sys_role_menu` VALUES (3, 115);
INSERT INTO `sys_role_menu` VALUES (3, 116);
INSERT INTO `sys_role_menu` VALUES (3, 500);
INSERT INTO `sys_role_menu` VALUES (3, 501);
INSERT INTO `sys_role_menu` VALUES (3, 1001);
INSERT INTO `sys_role_menu` VALUES (3, 1002);
INSERT INTO `sys_role_menu` VALUES (3, 1003);
INSERT INTO `sys_role_menu` VALUES (3, 1004);
INSERT INTO `sys_role_menu` VALUES (3, 1005);
INSERT INTO `sys_role_menu` VALUES (3, 1006);
INSERT INTO `sys_role_menu` VALUES (3, 1007);
INSERT INTO `sys_role_menu` VALUES (3, 1008);
INSERT INTO `sys_role_menu` VALUES (3, 1009);
INSERT INTO `sys_role_menu` VALUES (3, 1010);
INSERT INTO `sys_role_menu` VALUES (3, 1011);
INSERT INTO `sys_role_menu` VALUES (3, 1012);
INSERT INTO `sys_role_menu` VALUES (3, 1017);
INSERT INTO `sys_role_menu` VALUES (3, 1018);
INSERT INTO `sys_role_menu` VALUES (3, 1019);
INSERT INTO `sys_role_menu` VALUES (3, 1020);
INSERT INTO `sys_role_menu` VALUES (3, 1021);
INSERT INTO `sys_role_menu` VALUES (3, 1022);
INSERT INTO `sys_role_menu` VALUES (3, 1023);
INSERT INTO `sys_role_menu` VALUES (3, 1024);
INSERT INTO `sys_role_menu` VALUES (3, 1025);
INSERT INTO `sys_role_menu` VALUES (3, 1026);
INSERT INTO `sys_role_menu` VALUES (3, 1027);
INSERT INTO `sys_role_menu` VALUES (3, 1028);
INSERT INTO `sys_role_menu` VALUES (3, 1029);
INSERT INTO `sys_role_menu` VALUES (3, 1030);
INSERT INTO `sys_role_menu` VALUES (3, 1031);
INSERT INTO `sys_role_menu` VALUES (3, 1032);
INSERT INTO `sys_role_menu` VALUES (3, 1033);
INSERT INTO `sys_role_menu` VALUES (3, 1034);
INSERT INTO `sys_role_menu` VALUES (3, 1035);
INSERT INTO `sys_role_menu` VALUES (3, 1036);
INSERT INTO `sys_role_menu` VALUES (3, 1037);
INSERT INTO `sys_role_menu` VALUES (3, 1038);
INSERT INTO `sys_role_menu` VALUES (3, 1039);
INSERT INTO `sys_role_menu` VALUES (3, 1040);
INSERT INTO `sys_role_menu` VALUES (3, 1041);
INSERT INTO `sys_role_menu` VALUES (3, 1042);
INSERT INTO `sys_role_menu` VALUES (3, 1043);
INSERT INTO `sys_role_menu` VALUES (3, 1044);
INSERT INTO `sys_role_menu` VALUES (3, 1045);
INSERT INTO `sys_role_menu` VALUES (3, 1046);
INSERT INTO `sys_role_menu` VALUES (3, 1047);
INSERT INTO `sys_role_menu` VALUES (3, 1048);
INSERT INTO `sys_role_menu` VALUES (3, 1049);
INSERT INTO `sys_role_menu` VALUES (3, 1050);
INSERT INTO `sys_role_menu` VALUES (3, 1051);
INSERT INTO `sys_role_menu` VALUES (3, 1052);
INSERT INTO `sys_role_menu` VALUES (3, 1053);
INSERT INTO `sys_role_menu` VALUES (3, 1054);
INSERT INTO `sys_role_menu` VALUES (3, 1055);
INSERT INTO `sys_role_menu` VALUES (3, 1056);
INSERT INTO `sys_role_menu` VALUES (3, 1057);
INSERT INTO `sys_role_menu` VALUES (3, 1058);
INSERT INTO `sys_role_menu` VALUES (3, 1059);
INSERT INTO `sys_role_menu` VALUES (3, 1060);
INSERT INTO `sys_role_menu` VALUES (3, 2000);
INSERT INTO `sys_role_menu` VALUES (12, 2017);
INSERT INTO `sys_role_menu` VALUES (12, 2022);
INSERT INTO `sys_role_menu` VALUES (12, 2024);
INSERT INTO `sys_role_menu` VALUES (12, 2025);
INSERT INTO `sys_role_menu` VALUES (12, 2026);
INSERT INTO `sys_role_menu` VALUES (12, 2027);
INSERT INTO `sys_role_menu` VALUES (13, 1);
INSERT INTO `sys_role_menu` VALUES (13, 100);
INSERT INTO `sys_role_menu` VALUES (13, 1001);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'NULL' COMMENT '用户名',
  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'NULL' COMMENT '昵称',
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'NULL' COMMENT '密码',
  `type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '用户类型：0代表普通用户，1代表管理员',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '账号状态（0正常 1停用）',
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户性别（0男，1女，2未知）',
  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT '创建人的用户id',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT '更新人',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `del_flag` int(11) NULL DEFAULT 0 COMMENT '删除标志（0代表未删除，1代表已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14787164048671 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, 'sg', 'rock', '$2a$10$Jnq31rRkNV3RNzXe0REsEOSKaYK8UgVZZqlNlNXqn.JeVcj2NdeZy', '1', '0', '23412332@qq.com', '18888888888', '1', 'http://s6nwxxpsb.hd-bkt.clouddn.com/2024/01/04/65c6b138bb1546448d8bd2fa3dcc25eb.jpg', NULL, '2022-01-05 09:01:56', 1, '2022-01-30 15:37:03', 0);
INSERT INTO `sys_user` VALUES (3, 'sg3', 'weqe', '$2a$10$ydv3rLkteFnRx9xelQ7elOiVhFvXOooA98xCqk/omh7G94R.K/E3O', '1', '0', NULL, NULL, '0', NULL, NULL, '2022-01-05 13:28:43', NULL, '2022-01-05 13:28:43', 0);
INSERT INTO `sys_user` VALUES (4, 'sg2', 'dsadd', '$2a$10$kY4T3SN7i4muBccZppd2OOkhxMN6yt8tND1sF89hXOaFylhY2T3he', '1', '0', '23412332@qq.com', '19098790742', '0', NULL, NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (5, 'sg2233', 'tteqe', '', '1', '0', NULL, '18246845873', '1', NULL, NULL, '2022-01-06 03:51:13', NULL, '2022-01-06 07:00:50', 0);
INSERT INTO `sys_user` VALUES (6, 'sangeng', 'sangeng', '$2a$10$Jnq31rRkNV3RNzXe0REsEOSKaYK8UgVZZqlNlNXqn.JeVcj2NdeZy', '1', '0', '2312321', '17777777777', '0', NULL, NULL, '2022-01-16 06:54:26', NULL, '2022-01-16 07:06:34', 0);
INSERT INTO `sys_user` VALUES (14787164048662, 'weixin', 'weixin', '$2a$10$y3k3fnMZsBNihsVLXWfI8uMNueVXBI08k.LzWYaKsW8CW7xXy18wC', '0', '0', 'weixin@qq.com', NULL, NULL, NULL, -1, '2022-01-30 17:18:44', 1, '2024-01-20 16:36:19', 0);
INSERT INTO `sys_user` VALUES (14787164048665, 'test1', '波刚', '$2a$10$4kmX5MPbj/KvPF1m9Qzwu.6v2VtcMD5bPNDmrw04b0.uFbLeZ9EU2', '0', '0', '123456789@qq.com', NULL, '0', 'http://s6nwxxpsb.hd-bkt.clouddn.com/2024/01/04/66084de44cf644fe9ec41d59bf9b4da1.jpg', NULL, NULL, NULL, NULL, 0);
INSERT INTO `sys_user` VALUES (14787164048667, '测试用户10', 'test10', '$2a$10$Q5GzWqESRQmxeTOMKxZ7auld0nstBPVNyEqqDuo7KZ9j0IVpt2sUy', '0', '0', '228850396@qq.com', '13906771234', '1', NULL, 1, '2024-01-20 14:26:46', 1, '2024-01-20 14:35:57', 0);
INSERT INTO `sys_user` VALUES (14787164048668, '测试用户11', 'test11', '$2a$10$gbVJuuhcmv43c/C4EGj5Y.qWAX1d/q/C7emUNZgRQTJz/nHcZmDlO', '0', '0', '228850396@qq.com', '13906771234', '0', NULL, 1, '2024-01-20 14:55:58', 1, '2024-01-20 15:15:12', 0);
INSERT INTO `sys_user` VALUES (14787164048669, '测试用户10', 'test10', '$2a$10$nJbRzcRIiaiHL//OVOuYJ./ZhiWTrmVP9MSzmg3i005mAUatr7rg.', '0', '0', '123456@qq.com', '13906771234', '2', NULL, 1, '2024-01-20 15:22:37', 1, '2024-01-20 16:36:19', 1);
INSERT INTO `sys_user` VALUES (14787164048670, 't', 't', '$2a$10$hBOe8ZuLBe0m67AbvaiXpuD.fY9CUvZDXYBbMI3JyvEYm5l7uWbsG', '0', '0', '2723297533@qq.com', NULL, NULL, NULL, -1, '2024-01-23 17:48:17', -1, '2024-01-23 17:48:17', 0);

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户和角色关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES (1, 1);
INSERT INTO `sys_user_role` VALUES (2, 2);
INSERT INTO `sys_user_role` VALUES (5, 2);
INSERT INTO `sys_user_role` VALUES (6, 12);

SET FOREIGN_KEY_CHECKS = 1;
